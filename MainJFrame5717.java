package uptodate;

import com.twilio.Twilio;
import com.twilio.rest.api.v2010.account.Message;
import com.twilio.type.PhoneNumber;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jenniferluong, marktan
 */
public class MainJFrame5717 extends javax.swing.JFrame {

    static String USER = "natkram927";
    static String PASS = "aljemakart123";
    static String DBNAME = "uptodate";
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
    static String DB_URL = "jdbc:derby://localhost:1527/";
    static Connection conn;
    static Statement stmt;

    public static final String ACCOUNT_SID = "ACc6a4506753bc65e183f50696cf50ab8c";
    public static final String AUTH_TOKEN = "7f853f2ae79a8a8225fce8fe4574ec5c";
    
    static String USERNAME = "";
    static String PASSWORD = "";

    static boolean loggedIn = false;
    static boolean hasAccess = false;

    static String currentDay = "";

    static DateFormat df;
    static DateFormat format;   //initialize this at the top of the class
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame5717() {

        initComponents();
        selectionAll();

        jMenuBar1.setVisible(false);
        df = new SimpleDateFormat("yyyy-MM-dd");
        format = new SimpleDateFormat("HH:mm");

        currentDay = getCurrentDay();

        Date date = new Date();

    }

    /**
     * Connects to database
     */
    public void selectionAll() {
        DB_URL = DB_URL + DBNAME + ";user=" + USER + ";password=" + PASS;

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL);
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JDError = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        JDClose = new javax.swing.JButton();
        jMenuItem1 = new javax.swing.JMenuItem();
        homeCalButtonGroup = new javax.swing.ButtonGroup();
        calCoverPageButtonGroup = new javax.swing.ButtonGroup();
        viewUsersPopupMenu = new javax.swing.JPopupMenu();
        pMenuCreateEvent = new javax.swing.JMenuItem();
        defaultColorButtonGroup = new javax.swing.ButtonGroup();
        reminderDialog = new javax.swing.JDialog();
        reminderOption1 = new javax.swing.JPanel();
        jLabel113 = new javax.swing.JLabel();
        eventWithReminder1 = new javax.swing.JButton();
        proxCombo1 = new javax.swing.JComboBox();
        cRemVal1 = new javax.swing.JButton();
        proximity1 = new javax.swing.JLabel();
        evtRemEmpError1 = new javax.swing.JLabel();
        cEvnt = new javax.swing.JButton();
        reminderDialog1 = new javax.swing.JDialog();
        reminderOption = new javax.swing.JPanel();
        cEvntEmp = new javax.swing.JButton();
        jLabel81 = new javax.swing.JLabel();
        eventWithReminder = new javax.swing.JButton();
        proxCombo = new javax.swing.JComboBox();
        cRemVal = new javax.swing.JButton();
        proximity = new javax.swing.JLabel();
        evtRemEmpError = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        placeholder = new javax.swing.JPanel();
        openApp = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        JTUsername1 = new javax.swing.JTextField();
        JPWPass = new javax.swing.JPasswordField();
        JBSignIn = new javax.swing.JButton();
        JBCreateAccount = new javax.swing.JButton();
        JLError1 = new javax.swing.JLabel();
        background0 = new javax.swing.JLabel();
        Homepage = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        HPDayView = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        dayEventName = new javax.swing.JLabel();
        dayEventDate = new javax.swing.JLabel();
        dayEventDescription = new javax.swing.JLabel();
        dayEventStartDate = new javax.swing.JLabel();
        dayEventEndDate = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        jLabel115 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        dayEventLocation = new javax.swing.JLabel();
        dayEventStartTime = new javax.swing.JLabel();
        dayEventEndTime = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        dayEventDateChooser = new com.toedter.calendar.JDateChooser();
        dayEventChangeDate = new javax.swing.JButton();
        viewDayEventInfo1 = new javax.swing.JButton();
        DayEventScrollPane2 = new javax.swing.JScrollPane();
        dayEventList = new javax.swing.JList<>();
        HPCalendar = new javax.swing.JPanel();
        jCalendarHomepage = new org.freixas.jcalendar.JCalendar();
        jLabel4 = new javax.swing.JLabel();
        HPMonthView = new javax.swing.JPanel();
        jLabel103 = new javax.swing.JLabel();
        monthEventName1 = new javax.swing.JLabel();
        jLabel104 = new javax.swing.JLabel();
        monthEventDescription1 = new javax.swing.JLabel();
        jLabel105 = new javax.swing.JLabel();
        monthEventScrollPane1 = new javax.swing.JScrollPane();
        monthEventList1 = new javax.swing.JList<>();
        monthEventSDate1 = new javax.swing.JLabel();
        viewMonthEventInfo1 = new javax.swing.JButton();
        jLabel106 = new javax.swing.JLabel();
        monthEventStartDate1 = new javax.swing.JLabel();
        monthEventEndDate1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel107 = new javax.swing.JLabel();
        jLabel109 = new javax.swing.JLabel();
        monthEventMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        monthEventChangeDate1 = new javax.swing.JButton();
        monthEventYearChooser1 = new com.toedter.calendar.JYearChooser();
        monthEventEDate1 = new javax.swing.JLabel();
        dash3 = new javax.swing.JLabel();
        jLabel117 = new javax.swing.JLabel();
        jLabel118 = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        monthEventLocation1 = new javax.swing.JLabel();
        monthEventStartTime1 = new javax.swing.JLabel();
        monthEventEndTime1 = new javax.swing.JLabel();
        HPWeekView = new javax.swing.JPanel();
        jLabel96 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        weekEventDescription1 = new javax.swing.JLabel();
        jLabel98 = new javax.swing.JLabel();
        DayEventScrollPane3 = new javax.swing.JScrollPane();
        weekEventList1 = new javax.swing.JList<>();
        weekEventName1 = new javax.swing.JLabel();
        weekEventSDate1 = new javax.swing.JLabel();
        weekEventEDate1 = new javax.swing.JLabel();
        dash2 = new javax.swing.JLabel();
        weekEventChangeDate1 = new javax.swing.JButton();
        weekEventDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel99 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        weekEventEndDate1 = new javax.swing.JLabel();
        weekEventStartDate1 = new javax.swing.JLabel();
        jLabel102 = new javax.swing.JLabel();
        viewWeekEventInfo1 = new javax.swing.JButton();
        jlabellocation = new javax.swing.JLabel();
        jlabelstarttime = new javax.swing.JLabel();
        jlabelendtime = new javax.swing.JLabel();
        weekEventStartTime1 = new javax.swing.JLabel();
        weekEventLocation1 = new javax.swing.JLabel();
        weekEventEndTime1 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        noAppt = new javax.swing.JPanel();
        jLabel100 = new javax.swing.JLabel();
        dayViewCalendar = new javax.swing.JButton();
        weekViewCalendar = new javax.swing.JButton();
        monthViewCalendar = new javax.swing.JButton();
        fullViewCalendar = new javax.swing.JButton();
        welcomeHomepage = new javax.swing.JLabel();
        welcomeHomepage1 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        dateHomepage = new javax.swing.JLabel();
        background3 = new javax.swing.JLabel();
        viewAcct = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JLUsername = new javax.swing.JLabel();
        JLPassword = new javax.swing.JLabel();
        JB_EditPassword = new javax.swing.JButton();
        backFromDeleteEvnt1 = new javax.swing.JButton();
        changePasswordPanel = new javax.swing.JPanel();
        currentPassword = new javax.swing.JPasswordField();
        newPassword = new javax.swing.JPasswordField();
        newRetypedPassword = new javax.swing.JPasswordField();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        changePassword = new javax.swing.JButton();
        passwordError = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        JLFirstName = new javax.swing.JLabel();
        JLLastName = new javax.swing.JLabel();
        JLAddress = new javax.swing.JLabel();
        JLPhoneNum = new javax.swing.JLabel();
        JLType = new javax.swing.JLabel();
        background1 = new javax.swing.JLabel();
        CreateAcct = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cAcctUName = new javax.swing.JLabel();
        cAcctPWord = new javax.swing.JLabel();
        jPFPassword = new javax.swing.JPasswordField();
        JTUsername = new javax.swing.JTextField();
        JBCreateAcct = new javax.swing.JButton();
        JLAlert = new javax.swing.JLabel();
        JBGoBack = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        cAcctLName = new javax.swing.JLabel();
        cAcctFName = new javax.swing.JLabel();
        cAcctAddress = new javax.swing.JLabel();
        cAcctPNum = new javax.swing.JLabel();
        cAcctType = new javax.swing.JLabel();
        JTFName = new javax.swing.JTextField();
        JTLName = new javax.swing.JTextField();
        JTAddress = new javax.swing.JTextField();
        JTPNum = new javax.swing.JTextField();
        type = new javax.swing.JComboBox();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        background2 = new javax.swing.JLabel();
        createEvnt = new javax.swing.JPanel();
        eError = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        eTitle = new javax.swing.JLabel();
        eStartDate = new javax.swing.JLabel();
        sDateChooser = new com.toedter.calendar.JDateChooser();
        eDateChooser = new com.toedter.calendar.JDateChooser();
        eEndDate = new javax.swing.JLabel();
        eLocation = new javax.swing.JLabel();
        eDesc = new javax.swing.JLabel();
        locTF = new javax.swing.JTextField();
        descTF = new javax.swing.JTextField();
        titleTF = new javax.swing.JTextField();
        backFromCreateEvnt = new javax.swing.JButton();
        cEvntTitle = new javax.swing.JLabel();
        eTitle1 = new javax.swing.JLabel();
        eStartTime = new javax.swing.JLabel();
        eEndTime = new javax.swing.JLabel();
        createEventStartTime = new javax.swing.JSpinner();
        createEventEndTime = new javax.swing.JSpinner();
        evButton = new javax.swing.JButton();
        background4 = new javax.swing.JLabel();
        editEvnt = new javax.swing.JPanel();
        eEventError = new javax.swing.JLabel();
        eEventList = new javax.swing.JComboBox<>();
        eEventChange1 = new javax.swing.JButton();
        eEventChange2 = new javax.swing.JButton();
        eEventChange3 = new javax.swing.JButton();
        evNo = new javax.swing.JLabel();
        eEventAtt = new javax.swing.JLabel();
        newInfoEvent = new javax.swing.JLabel();
        eventOptions = new javax.swing.JComboBox();
        editEvntTitle = new javax.swing.JLabel();
        backFromEditEvent = new javax.swing.JButton();
        eEventDateChooser = new com.toedter.calendar.JDateChooser();
        infoEventTF = new javax.swing.JTextField();
        editProxCombo = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel11 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        eEventName = new javax.swing.JLabel();
        eEventSDate = new javax.swing.JLabel();
        eEventLocation = new javax.swing.JLabel();
        eEventEDate = new javax.swing.JLabel();
        eEventDescription = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        eEventSTime = new javax.swing.JLabel();
        eEventETime = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        reminderTimeEdit = new javax.swing.JLabel();
        background5 = new javax.swing.JLabel();
        deleteEvnt = new javax.swing.JPanel();
        dEventList = new javax.swing.JComboBox<>();
        backFromDeleteEvnt = new javax.swing.JButton();
        dEventTitle = new javax.swing.JLabel();
        dEventInfo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        dEventName = new javax.swing.JLabel();
        dEventSDate = new javax.swing.JLabel();
        dEventLocation = new javax.swing.JLabel();
        dEventEDate = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        dEventDescription = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        dEventSTime = new javax.swing.JLabel();
        dEventETime = new javax.swing.JLabel();
        deleteChoice = new javax.swing.JButton();
        optionDelete = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        dEvnt = new javax.swing.JButton();
        backFromConfirm = new javax.swing.JButton();
        background6 = new javax.swing.JLabel();
        settings = new javax.swing.JPanel();
        cRemTitle4 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        changeCalendar = new javax.swing.JRadioButton();
        changeMonth = new javax.swing.JRadioButton();
        changeWeek = new javax.swing.JRadioButton();
        changeDay = new javax.swing.JRadioButton();
        changeFirstAppt = new javax.swing.JRadioButton();
        changeColor = new javax.swing.JButton();
        jLabel110 = new javax.swing.JLabel();
        changeCurrentDay = new javax.swing.JRadioButton();
        changeSettings = new javax.swing.JButton();
        jLabel94 = new javax.swing.JLabel();
        changeStartTime = new javax.swing.JButton();
        changeEndTime = new javax.swing.JButton();
        settingsStartTime = new javax.swing.JSpinner();
        settingsEndTime = new javax.swing.JSpinner();
        jLabel120 = new javax.swing.JLabel();
        officeHourError = new javax.swing.JLabel();
        changeGreen = new javax.swing.JRadioButton();
        changeBlue = new javax.swing.JRadioButton();
        changeRed = new javax.swing.JRadioButton();
        changeDefault = new javax.swing.JRadioButton();
        reminderSetting = new javax.swing.JComboBox<>();
        reminderSettingChange = new javax.swing.JButton();
        background13 = new javax.swing.JLabel();
        help = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        welcome = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        creatingAnAccount = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        signIn = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        events = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        reminders = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        background14 = new javax.swing.JLabel();
        viewUsers = new javax.swing.JPanel();
        cRemTitle5 = new javax.swing.JLabel();
        userType = new javax.swing.JComboBox<>();
        userTable = new javax.swing.JScrollPane();
        viewUserTable = new javax.swing.JTable();
        background15 = new javax.swing.JLabel();
        createEvntEmp = new javax.swing.JPanel();
        eError1 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel108 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        eTitle2 = new javax.swing.JLabel();
        eStartDate1 = new javax.swing.JLabel();
        sDateChooser1 = new com.toedter.calendar.JDateChooser();
        eDateChooser1 = new com.toedter.calendar.JDateChooser();
        eEndDate1 = new javax.swing.JLabel();
        eLocation1 = new javax.swing.JLabel();
        eDesc1 = new javax.swing.JLabel();
        locTF1 = new javax.swing.JTextField();
        descTF1 = new javax.swing.JTextField();
        titleTF1 = new javax.swing.JTextField();
        backFromCreateEvnt1 = new javax.swing.JButton();
        cEvntTitle1 = new javax.swing.JLabel();
        eTitle3 = new javax.swing.JLabel();
        eStartTime1 = new javax.swing.JLabel();
        eEndTime1 = new javax.swing.JLabel();
        createEventEmpStartTime = new javax.swing.JSpinner();
        createEventEmpEndTime = new javax.swing.JSpinner();
        jLabel112 = new javax.swing.JLabel();
        usernameEvent = new javax.swing.JLabel();
        eventButton = new javax.swing.JButton();
        background16 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        HomeTab = new javax.swing.JMenu();
        goHome = new javax.swing.JMenuItem();
        AccountTab = new javax.swing.JMenu();
        viewAccount = new javax.swing.JMenuItem();
        EControlTab = new javax.swing.JMenu();
        viewUsersItem = new javax.swing.JMenuItem();
        createUserAcctEmp = new javax.swing.JMenuItem();
        EventTab = new javax.swing.JMenu();
        createEvent = new javax.swing.JMenuItem();
        editEvent = new javax.swing.JMenuItem();
        deleteEvent = new javax.swing.JMenuItem();
        SettingsTab = new javax.swing.JMenu();
        Settings = new javax.swing.JMenuItem();
        HelpTab = new javax.swing.JMenu();
        goToHelp = new javax.swing.JMenuItem();
        SignOutTab = new javax.swing.JMenu();
        signOut = new javax.swing.JMenuItem();

        JDError.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        JDError.setTitle("Error");
        JDError.setBackground(new java.awt.Color(255, 255, 255));
        JDError.setLocation(new java.awt.Point(625, 300));
        JDError.setMinimumSize(new java.awt.Dimension(300, 200));
        JDError.setResizable(false);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setMaximumSize(new java.awt.Dimension(300, 200));
        jPanel3.setSize(new java.awt.Dimension(300, 200));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel6.setText("Bruh, you gotta log in to use this feature.");

        JDClose.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JDClose.setText("Close");
        JDClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JDCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel6)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JDClose)
                .addGap(105, 105, 105))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel6)
                .addGap(36, 36, 36)
                .addComponent(JDClose)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout JDErrorLayout = new javax.swing.GroupLayout(JDError.getContentPane());
        JDError.getContentPane().setLayout(JDErrorLayout);
        JDErrorLayout.setHorizontalGroup(
            JDErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        JDErrorLayout.setVerticalGroup(
            JDErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jMenuItem1.setText("jMenuItem1");

        pMenuCreateEvent.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        pMenuCreateEvent.setText("Create Event");
        pMenuCreateEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pMenuCreateEventActionPerformed(evt);
            }
        });
        viewUsersPopupMenu.add(pMenuCreateEvent);

        reminderDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        reminderDialog.setAlwaysOnTop(true);
        reminderDialog.setBounds(new java.awt.Rectangle(625, 300, 416, 180));
        reminderDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        reminderDialog.setMinimumSize(new java.awt.Dimension(300, 200));
        reminderDialog.setResizable(false);

        jLabel113.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel113.setText("Would you like to create a reminder for this event?");

        eventWithReminder1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eventWithReminder1.setText("Create");
        eventWithReminder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventWithReminder1ActionPerformed(evt);
            }
        });

        proxCombo1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        proxCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "At time of event", "5 minutes before", "15 minutes before", "30 minutes before", "1 hour before", "1 day before", "1 week before" }));
        proxCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxCombo1ActionPerformed(evt);
            }
        });

        cRemVal1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        cRemVal1.setText("Yes");
        cRemVal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cRemVal1ActionPerformed(evt);
            }
        });

        proximity1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        proximity1.setText("Proximity");

        evtRemEmpError1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        cEvnt.setBackground(new java.awt.Color(255, 255, 255));
        cEvnt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        cEvnt.setText("No");
        cEvnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cEvntActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reminderOption1Layout = new javax.swing.GroupLayout(reminderOption1);
        reminderOption1.setLayout(reminderOption1Layout);
        reminderOption1Layout.setHorizontalGroup(
            reminderOption1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reminderOption1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(proximity1)
                .addGap(18, 18, 18)
                .addComponent(proxCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eventWithReminder1)
                .addGap(50, 50, 50))
            .addGroup(reminderOption1Layout.createSequentialGroup()
                .addGroup(reminderOption1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reminderOption1Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(cEvnt)
                        .addGap(48, 48, 48)
                        .addComponent(cRemVal1))
                    .addGroup(reminderOption1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(evtRemEmpError1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reminderOption1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel113)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reminderOption1Layout.setVerticalGroup(
            reminderOption1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reminderOption1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel113)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(reminderOption1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cRemVal1)
                    .addComponent(cEvnt))
                .addGap(24, 24, 24)
                .addGroup(reminderOption1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proxCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventWithReminder1)
                    .addComponent(proximity1))
                .addGap(18, 18, 18)
                .addComponent(evtRemEmpError1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout reminderDialogLayout = new javax.swing.GroupLayout(reminderDialog.getContentPane());
        reminderDialog.getContentPane().setLayout(reminderDialogLayout);
        reminderDialogLayout.setHorizontalGroup(
            reminderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 406, Short.MAX_VALUE)
            .addGroup(reminderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reminderDialogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(reminderOption1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        reminderDialogLayout.setVerticalGroup(
            reminderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
            .addGroup(reminderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reminderDialogLayout.createSequentialGroup()
                    .addGap(0, 10, Short.MAX_VALUE)
                    .addComponent(reminderOption1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 10, Short.MAX_VALUE)))
        );

        reminderDialog1.setBounds(new java.awt.Rectangle(0, 22, 416, 180));

        cEvntEmp.setBackground(new java.awt.Color(255, 255, 255));
        cEvntEmp.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        cEvntEmp.setText("No");
        cEvntEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cEvntEmpActionPerformed(evt);
            }
        });

        jLabel81.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel81.setText("Would you like to create a reminder for this event?");

        eventWithReminder.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eventWithReminder.setText("Create");
        eventWithReminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventWithReminderActionPerformed(evt);
            }
        });

        proxCombo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        proxCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "At time of event", "5 minutes before", "15 minutes before", "30 minutes before", "1 hour before", "1 day before", "1 week before" }));

        cRemVal.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        cRemVal.setText("Yes");
        cRemVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cRemValActionPerformed(evt);
            }
        });

        proximity.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        proximity.setText("Proximity");

        evtRemEmpError.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        javax.swing.GroupLayout reminderOptionLayout = new javax.swing.GroupLayout(reminderOption);
        reminderOption.setLayout(reminderOptionLayout);
        reminderOptionLayout.setHorizontalGroup(
            reminderOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reminderOptionLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(proximity)
                .addGap(18, 18, 18)
                .addComponent(proxCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eventWithReminder)
                .addGap(50, 50, 50))
            .addGroup(reminderOptionLayout.createSequentialGroup()
                .addGroup(reminderOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reminderOptionLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(cEvntEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(cRemVal))
                    .addGroup(reminderOptionLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(evtRemEmpError, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reminderOptionLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel81)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reminderOptionLayout.setVerticalGroup(
            reminderOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reminderOptionLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel81)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(reminderOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cEvntEmp)
                    .addComponent(cRemVal))
                .addGap(24, 24, 24)
                .addGroup(reminderOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proxCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventWithReminder)
                    .addComponent(proximity))
                .addGap(18, 18, 18)
                .addComponent(evtRemEmpError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout reminderDialog1Layout = new javax.swing.GroupLayout(reminderDialog1.getContentPane());
        reminderDialog1.getContentPane().setLayout(reminderDialog1Layout);
        reminderDialog1Layout.setHorizontalGroup(
            reminderDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(reminderDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reminderDialog1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(reminderOption, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        reminderDialog1Layout.setVerticalGroup(
            reminderDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(reminderDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reminderDialog1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(reminderOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("up to date");
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(275, 100));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(900, 700));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBounds(new java.awt.Rectangle(0, 0, 900, 700));
        jPanel1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jPanel1.setMaximumSize(new java.awt.Dimension(900, 700));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 700));

        placeholder.setMaximumSize(new java.awt.Dimension(900, 700));
        placeholder.setPreferredSize(new java.awt.Dimension(900, 700));
        placeholder.setSize(new java.awt.Dimension(900, 700));
        placeholder.setLayout(new java.awt.CardLayout());

        openApp.setBackground(new java.awt.Color(255, 255, 255));
        openApp.setMinimumSize(new java.awt.Dimension(1000, 700));
        openApp.setPreferredSize(new java.awt.Dimension(1000, 700));
        openApp.setLayout(null);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Mark My Words", 1, 60)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("UpToDate");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openApp.add(jLabel7);
        jLabel7.setBounds(0, 0, 900, 160);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel8.setText("Username:");
        openApp.add(jLabel8);
        jLabel8.setBounds(360, 310, 66, 20);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel9.setText("Password:");
        openApp.add(jLabel9);
        jLabel9.setBounds(360, 350, 65, 16);

        JTUsername1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JTUsername1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTUsername1ActionPerformed(evt);
            }
        });
        openApp.add(JTUsername1);
        JTUsername1.setBounds(440, 310, 135, 26);

        JPWPass.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JPWPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JPWPassActionPerformed(evt);
            }
        });
        openApp.add(JPWPass);
        JPWPass.setBounds(440, 340, 136, 26);

        JBSignIn.setBackground(new java.awt.Color(255, 255, 255));
        JBSignIn.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JBSignIn.setText("Sign In");
        JBSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBSignInActionPerformed(evt);
            }
        });
        openApp.add(JBSignIn);
        JBSignIn.setBounds(340, 400, 85, 29);

        JBCreateAccount.setBackground(new java.awt.Color(255, 255, 255));
        JBCreateAccount.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JBCreateAccount.setText("Create an Account");
        JBCreateAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCreateAccountActionPerformed(evt);
            }
        });
        openApp.add(JBCreateAccount);
        JBCreateAccount.setBounds(440, 400, 152, 29);

        JLError1.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        JLError1.setForeground(new java.awt.Color(204, 0, 51));
        JLError1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        openApp.add(JLError1);
        JLError1.setBounds(370, 260, 190, 20);

        background0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background0.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        background0.setPreferredSize(new java.awt.Dimension(1000, 700));
        background0.setSize(new java.awt.Dimension(1000, 700));
        openApp.add(background0);
        background0.setBounds(0, 0, 1000, 700);

        placeholder.add(openApp, "card3");

        Homepage.setBackground(new java.awt.Color(255, 255, 255));
        Homepage.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        Homepage.setMaximumSize(new java.awt.Dimension(900, 700));
        Homepage.setMinimumSize(new java.awt.Dimension(900, 700));
        Homepage.setLayout(null);

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Mark My Words", 1, 60)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("UpToDate");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Homepage.add(jLabel15);
        jLabel15.setBounds(0, 0, 900, 160);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.CardLayout());

        HPDayView.setBackground(new java.awt.Color(255, 255, 255));
        HPDayView.setMaximumSize(new java.awt.Dimension(600, 400));
        HPDayView.setPreferredSize(new java.awt.Dimension(600, 400));
        HPDayView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Day View");
        HPDayView.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 600, 20));

        jLabel66.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel66.setText("Name:");
        HPDayView.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 50, 20));

        jLabel72.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel72.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel72.setText("Date:");
        HPDayView.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 40, 30));

        jLabel91.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel91.setText("Description:");
        HPDayView.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 90, 20));

        jLabel92.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel92.setText("Start Date:");
        HPDayView.add(jLabel92, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 90, 30));

        dayEventName.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayEventName.setText(" ");
        HPDayView.add(dayEventName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 150, 20));

        dayEventDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayEventDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dayEventDate.setText(" ");
        HPDayView.add(dayEventDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 120, 20));

        dayEventDescription.setFont(new java.awt.Font("Arial", 2, 13)); // NOI18N
        dayEventDescription.setText(" ");
        dayEventDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        HPDayView.add(dayEventDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, 170, 70));

        dayEventStartDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayEventStartDate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dayEventStartDate.setText(" ");
        HPDayView.add(dayEventStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 130, 20));

        dayEventEndDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayEventEndDate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dayEventEndDate.setText(" ");
        HPDayView.add(dayEventEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 130, 20));

        jLabel114.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel114.setText("Location:");
        HPDayView.add(jLabel114, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 80, 40));

        jLabel115.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel115.setText("Start Time:");
        HPDayView.add(jLabel115, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 90, 40));

        jLabel116.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel116.setText("End Time:");
        HPDayView.add(jLabel116, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 80, 20));

        dayEventLocation.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayEventLocation.setText(" ");
        HPDayView.add(dayEventLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 130, 20));

        dayEventStartTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayEventStartTime.setText(" ");
        HPDayView.add(dayEventStartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 220, 130, 20));

        dayEventEndTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayEventEndTime.setText(" ");
        HPDayView.add(dayEventEndTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 130, 20));

        jLabel93.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel93.setText("End Date:");
        HPDayView.add(jLabel93, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 90, 20));

        jLabel95.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel95.setText("Change Date:");
        HPDayView.add(jLabel95, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 100, 20));

        dayEventDateChooser.setDateFormatString("yyyy-MM-dd");
        dayEventDateChooser.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        HPDayView.add(dayEventDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, 120, 20));

        dayEventChangeDate.setBackground(new java.awt.Color(255, 255, 255));
        dayEventChangeDate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dayEventChangeDate.setText("Go");
        dayEventChangeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayEventChangeDateActionPerformed(evt);
            }
        });
        HPDayView.add(dayEventChangeDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, 30, 20));

        viewDayEventInfo1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        viewDayEventInfo1.setText("View Info");
        viewDayEventInfo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDayEventInfo1ActionPerformed(evt);
            }
        });
        HPDayView.add(viewDayEventInfo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 370, 80, 20));

        dayEventList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dayEventList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Event List" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        dayEventList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DayEventScrollPane2.setViewportView(dayEventList);

        HPDayView.add(DayEventScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, 220, 270));

        jPanel2.add(HPDayView, "card6");

        HPCalendar.setBackground(new java.awt.Color(255, 255, 255));

        jCalendarHomepage.addDateListener(new org.freixas.jcalendar.DateListener() {
            public void dateChanged(org.freixas.jcalendar.DateEvent evt) {
                jCalendarHomepageDateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Calendar View");

        javax.swing.GroupLayout HPCalendarLayout = new javax.swing.GroupLayout(HPCalendar);
        HPCalendar.setLayout(HPCalendarLayout);
        HPCalendarLayout.setHorizontalGroup(
            HPCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HPCalendarLayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(jCalendarHomepage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        HPCalendarLayout.setVerticalGroup(
            HPCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HPCalendarLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4)
                .addGap(12, 12, 12)
                .addComponent(jCalendarHomepage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel2.add(HPCalendar, "card8");

        HPMonthView.setBackground(new java.awt.Color(255, 255, 255));
        HPMonthView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel103.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel103.setText("Name:");
        HPMonthView.add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 111, 50, 20));

        monthEventName1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventName1.setText(" ");
        HPMonthView.add(monthEventName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 113, 140, -1));

        jLabel104.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel104.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel104.setText("Date:");
        HPMonthView.add(jLabel104, new org.netbeans.lib.awtextra.AbsoluteConstraints(153, 26, 50, 20));

        monthEventDescription1.setFont(new java.awt.Font("Arial", 2, 13)); // NOI18N
        monthEventDescription1.setText(" ");
        monthEventDescription1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        HPMonthView.add(monthEventDescription1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 305, 210, 80));

        jLabel105.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel105.setText("Description:");
        HPMonthView.add(jLabel105, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 279, 90, 20));

        monthEventList1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        monthEventList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Event List" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        monthEventList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        monthEventScrollPane1.setViewportView(monthEventList1);

        HPMonthView.add(monthEventScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 90, 220, 266));

        monthEventSDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventSDate1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthEventSDate1.setText(" ");
        HPMonthView.add(monthEventSDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 52, 120, 20));

        viewMonthEventInfo1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        viewMonthEventInfo1.setText("View Info");
        viewMonthEventInfo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMonthEventInfo1ActionPerformed(evt);
            }
        });
        HPMonthView.add(viewMonthEventInfo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(498, 362, 90, 30));

        jLabel106.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel106.setText("Start Date:");
        HPMonthView.add(jLabel106, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 163, 70, 20));

        monthEventStartDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventStartDate1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        monthEventStartDate1.setText(" ");
        HPMonthView.add(monthEventStartDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 163, 140, 20));

        monthEventEndDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventEndDate1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        monthEventEndDate1.setText(" ");
        HPMonthView.add(monthEventEndDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 189, 140, 20));

        jLabel14.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Month View");
        HPMonthView.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 600, 20));

        jLabel107.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel107.setText("End Date:");
        HPMonthView.add(jLabel107, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 189, 70, 20));

        jLabel109.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel109.setText("Change Date:");
        HPMonthView.add(jLabel109, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 32, 100, 20));

        monthEventMonthChooser1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        HPMonthView.add(monthEventMonthChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 52, 137, 20));

        monthEventChangeDate1.setBackground(new java.awt.Color(255, 255, 255));
        monthEventChangeDate1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        monthEventChangeDate1.setText("Go");
        monthEventChangeDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthEventChangeDate1ActionPerformed(evt);
            }
        });
        HPMonthView.add(monthEventChangeDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(554, 52, 30, 20));
        HPMonthView.add(monthEventYearChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(508, 52, -1, 20));

        monthEventEDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventEDate1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthEventEDate1.setText(" ");
        HPMonthView.add(monthEventEDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 52, 100, 20));

        dash3.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dash3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dash3.setText("-");
        HPMonthView.add(dash3, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 52, 20, 20));

        jLabel117.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel117.setText("Start Time:");
        HPMonthView.add(jLabel117, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 221, -1, 20));

        jLabel118.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel118.setText("Location:");
        HPMonthView.add(jLabel118, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 137, -1, 20));

        jLabel119.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel119.setText("End Time:");
        HPMonthView.add(jLabel119, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 253, -1, 20));

        monthEventLocation1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventLocation1.setText(" ");
        HPMonthView.add(monthEventLocation1, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 139, 140, -1));

        monthEventStartTime1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventStartTime1.setText(" ");
        HPMonthView.add(monthEventStartTime1, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 223, 140, -1));

        monthEventEndTime1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthEventEndTime1.setText(" ");
        HPMonthView.add(monthEventEndTime1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 255, 140, -1));

        jPanel2.add(HPMonthView, "card9");

        HPWeekView.setBackground(new java.awt.Color(255, 255, 255));
        HPWeekView.setMaximumSize(new java.awt.Dimension(600, 400));
        HPWeekView.setMinimumSize(new java.awt.Dimension(600, 400));
        HPWeekView.setPreferredSize(new java.awt.Dimension(600, 400));
        HPWeekView.setRequestFocusEnabled(false);

        jLabel96.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel96.setText("Name:");

        jLabel97.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel97.setText("Description:");

        weekEventDescription1.setFont(new java.awt.Font("Arial", 2, 13)); // NOI18N
        weekEventDescription1.setText(" ");
        weekEventDescription1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel98.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel98.setText("Date:");

        weekEventList1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        weekEventList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Event List" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        DayEventScrollPane3.setViewportView(weekEventList1);

        weekEventName1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        weekEventName1.setText(" ");

        weekEventSDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        weekEventSDate1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        weekEventSDate1.setText(" ");

        weekEventEDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        weekEventEDate1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        weekEventEDate1.setText(" ");

        dash2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dash2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dash2.setText("-");

        weekEventChangeDate1.setBackground(new java.awt.Color(255, 255, 255));
        weekEventChangeDate1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        weekEventChangeDate1.setText("Go");
        weekEventChangeDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weekEventChangeDate1ActionPerformed(evt);
            }
        });

        weekEventDateChooser1.setDateFormatString("yyyy-MM-dd");
        weekEventDateChooser1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel99.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel99.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel99.setText("Change Date:");

        jLabel101.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel101.setText("End Date:");

        weekEventEndDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        weekEventEndDate1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        weekEventEndDate1.setText(" ");

        weekEventStartDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        weekEventStartDate1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        weekEventStartDate1.setText(" ");

        jLabel102.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel102.setText("Start Date:");

        viewWeekEventInfo1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        viewWeekEventInfo1.setText("View Info");
        viewWeekEventInfo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewWeekEventInfo1ActionPerformed(evt);
            }
        });

        jlabellocation.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jlabellocation.setText("Location:");

        jlabelstarttime.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jlabelstarttime.setText("Start Time:");

        jlabelendtime.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jlabelendtime.setText("End Time:");

        weekEventStartTime1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        weekEventLocation1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        weekEventEndTime1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Week View");

        javax.swing.GroupLayout HPWeekViewLayout = new javax.swing.GroupLayout(HPWeekView);
        HPWeekView.setLayout(HPWeekViewLayout);
        HPWeekViewLayout.setHorizontalGroup(
            HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HPWeekViewLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addComponent(jlabelendtime, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(weekEventEndTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlabelstarttime, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel101, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(weekEventStartTime1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(weekEventEndDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(weekEventDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel97, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addComponent(jLabel96, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(weekEventName1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addComponent(jLabel102, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(weekEventStartDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addComponent(jlabellocation, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(weekEventLocation1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(weekEventSDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(weekEventEDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel98, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dash2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(HPWeekViewLayout.createSequentialGroup()
                                .addComponent(weekEventDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(weekEventChangeDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(viewWeekEventInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DayEventScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel99, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        HPWeekViewLayout.setVerticalGroup(
            HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HPWeekViewLayout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addComponent(jLabel20)
                .addGap(27, 27, 27)
                .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel98, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel99, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weekEventSDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weekEventEDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dash2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(weekEventDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(weekEventChangeDate1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(DayEventScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewWeekEventInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HPWeekViewLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weekEventName1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel96, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weekEventLocation1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabellocation, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weekEventStartDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel102, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weekEventEndDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel101, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weekEventStartTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabelstarttime, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(HPWeekViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weekEventEndTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabelendtime, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel97, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weekEventDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );

        jPanel2.add(HPWeekView, "card7");

        jLabel100.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel100.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel100.setText("There are no upcoming appointments");

        javax.swing.GroupLayout noApptLayout = new javax.swing.GroupLayout(noAppt);
        noAppt.setLayout(noApptLayout);
        noApptLayout.setHorizontalGroup(
            noApptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel100, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );
        noApptLayout.setVerticalGroup(
            noApptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noApptLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel100)
                .addContainerGap(402, Short.MAX_VALUE))
        );

        jPanel2.add(noAppt, "card6");

        jScrollPane1.setViewportView(jPanel2);

        Homepage.add(jScrollPane1);
        jScrollPane1.setBounds(130, 270, 644, 350);

        dayViewCalendar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dayViewCalendar.setText("Day View");
        dayViewCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayViewCalendarActionPerformed(evt);
            }
        });
        Homepage.add(dayViewCalendar);
        dayViewCalendar.setBounds(270, 640, 99, 29);

        weekViewCalendar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        weekViewCalendar.setText("Week View");
        weekViewCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weekViewCalendarActionPerformed(evt);
            }
        });
        Homepage.add(weekViewCalendar);
        weekViewCalendar.setBounds(390, 640, 109, 29);

        monthViewCalendar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        monthViewCalendar.setText("Month View");
        monthViewCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthViewCalendarActionPerformed(evt);
            }
        });
        Homepage.add(monthViewCalendar);
        monthViewCalendar.setBounds(520, 640, 112, 29);

        fullViewCalendar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        fullViewCalendar.setText("Calendar");
        fullViewCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullViewCalendarActionPerformed(evt);
            }
        });
        Homepage.add(fullViewCalendar);
        fullViewCalendar.setBounds(650, 640, 95, 29);

        welcomeHomepage.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        welcomeHomepage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeHomepage.setText("Welcome!");
        Homepage.add(welcomeHomepage);
        welcomeHomepage.setBounds(0, 130, 900, 22);

        welcomeHomepage1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        welcomeHomepage1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeHomepage1.setText("Today is:");
        Homepage.add(welcomeHomepage1);
        welcomeHomepage1.setBounds(0, 190, 900, 16);

        jLabel37.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("Display Events");
        Homepage.add(jLabel37);
        jLabel37.setBounds(130, 640, 92, 30);

        dateHomepage.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        dateHomepage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateHomepage.setText("[date]");
        Homepage.add(dateHomepage);
        dateHomepage.setBounds(0, 210, 900, 16);

        background3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        Homepage.add(background3);
        background3.setBounds(0, 0, 1000, 800);

        placeholder.add(Homepage, "card5");

        viewAcct.setBackground(new java.awt.Color(255, 255, 255));
        viewAcct.setMinimumSize(new java.awt.Dimension(1000, 700));
        viewAcct.setPreferredSize(new java.awt.Dimension(1000, 700));
        viewAcct.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Mark My Words", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("User Information");
        viewAcct.add(jLabel1);
        jLabel1.setBounds(0, 0, 900, 160);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel2.setText("Username:");
        viewAcct.add(jLabel2);
        jLabel2.setBounds(200, 196, 66, 30);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel3.setText("Password:");
        viewAcct.add(jLabel3);
        jLabel3.setBounds(200, 230, 65, 20);

        JLUsername.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JLUsername.setText("[username]");
        viewAcct.add(JLUsername);
        JLUsername.setBounds(330, 200, 180, 16);

        JLPassword.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JLPassword.setText("[password]");
        viewAcct.add(JLPassword);
        JLPassword.setBounds(330, 230, 180, 20);

        JB_EditPassword.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JB_EditPassword.setText("Edit");
        JB_EditPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_EditPasswordActionPerformed(evt);
            }
        });
        viewAcct.add(JB_EditPassword);
        JB_EditPassword.setBounds(510, 230, 75, 30);

        backFromDeleteEvnt1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        backFromDeleteEvnt1.setText("Back");
        backFromDeleteEvnt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromDeleteEvnt1ActionPerformed(evt);
            }
        });
        viewAcct.add(backFromDeleteEvnt1);
        backFromDeleteEvnt1.setBounds(400, 610, 75, 29);

        currentPassword.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        currentPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPasswordActionPerformed(evt);
            }
        });

        newPassword.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        newRetypedPassword.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        jLabel59.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel59.setText("Current:");

        jLabel60.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel60.setText("New:");

        jLabel61.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel61.setText("Re-type new:");

        changePassword.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changePassword.setText("Change");
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout changePasswordPanelLayout = new javax.swing.GroupLayout(changePasswordPanel);
        changePasswordPanel.setLayout(changePasswordPanelLayout);
        changePasswordPanelLayout.setHorizontalGroup(
            changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changePasswordPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel59)
                    .addComponent(jLabel60)
                    .addComponent(jLabel61))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(newRetypedPassword)
                    .addComponent(newPassword)
                    .addComponent(currentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(changePassword)
                .addGap(42, 42, 42))
        );
        changePasswordPanelLayout.setVerticalGroup(
            changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changePasswordPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel59))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel60))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newRetypedPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel61)
                    .addComponent(changePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        viewAcct.add(changePasswordPanel);
        changePasswordPanel.setBounds(240, 440, 360, 130);

        passwordError.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        passwordError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        passwordError.setText("  ");
        viewAcct.add(passwordError);
        passwordError.setBounds(0, 140, 1000, 16);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel11.setText("First Name:");
        viewAcct.add(jLabel11);
        jLabel11.setBounds(200, 260, 80, 30);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel12.setText("Last Name:");
        viewAcct.add(jLabel12);
        jLabel12.setBounds(200, 290, 69, 30);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel13.setText("Address:");
        viewAcct.add(jLabel13);
        jLabel13.setBounds(200, 320, 55, 30);

        jLabel44.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel44.setText("Phone Number:");
        viewAcct.add(jLabel44);
        jLabel44.setBounds(200, 360, 97, 16);

        jLabel62.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel62.setText("User Type:");
        viewAcct.add(jLabel62);
        jLabel62.setBounds(200, 390, 66, 16);

        JLFirstName.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JLFirstName.setText("[first name]");
        viewAcct.add(JLFirstName);
        JLFirstName.setBounds(330, 270, 180, 16);

        JLLastName.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JLLastName.setText("[last name]");
        viewAcct.add(JLLastName);
        JLLastName.setBounds(330, 300, 180, 16);

        JLAddress.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JLAddress.setText("[address]");
        viewAcct.add(JLAddress);
        JLAddress.setBounds(330, 330, 320, 16);

        JLPhoneNum.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JLPhoneNum.setText("[phone number]");
        viewAcct.add(JLPhoneNum);
        JLPhoneNum.setBounds(330, 360, 190, 16);

        JLType.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JLType.setText("[type]");
        viewAcct.add(JLType);
        JLType.setBounds(330, 390, 180, 16);

        background1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        viewAcct.add(background1);
        background1.setBounds(0, 0, 1000, 800);

        placeholder.add(viewAcct, "card2");

        CreateAcct.setBackground(new java.awt.Color(255, 255, 255));
        CreateAcct.setMaximumSize(new java.awt.Dimension(320, 327));
        CreateAcct.setPreferredSize(new java.awt.Dimension(900, 700));
        CreateAcct.setLayout(null);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Create an Account");
        CreateAcct.add(jLabel10);
        jLabel10.setBounds(0, 160, 900, 22);

        cAcctUName.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        cAcctUName.setText("Username:");
        CreateAcct.add(cAcctUName);
        cAcctUName.setBounds(290, 230, 66, 30);

        cAcctPWord.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        cAcctPWord.setText("Password:");
        CreateAcct.add(cAcctPWord);
        cAcctPWord.setBounds(290, 270, 65, 30);

        jPFPassword.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jPFPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPFPasswordActionPerformed(evt);
            }
        });
        CreateAcct.add(jPFPassword);
        jPFPassword.setBounds(480, 270, 170, 26);

        JTUsername.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        CreateAcct.add(JTUsername);
        JTUsername.setBounds(480, 230, 170, 26);

        JBCreateAcct.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JBCreateAcct.setText("Create");
        JBCreateAcct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCreateAcctActionPerformed(evt);
            }
        });
        CreateAcct.add(JBCreateAcct);
        JBCreateAcct.setBounds(482, 570, 90, 29);

        JLAlert.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        JLAlert.setForeground(new java.awt.Color(204, 0, 51));
        JLAlert.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CreateAcct.add(JLAlert);
        JLAlert.setBounds(10, 200, 900, 18);

        JBGoBack.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        JBGoBack.setText("Go Back");
        JBGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBGoBackActionPerformed(evt);
            }
        });
        CreateAcct.add(JBGoBack);
        JBGoBack.setBounds(330, 570, 95, 29);

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Mark My Words", 1, 60)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("UpToDate");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CreateAcct.add(jLabel16);
        jLabel16.setBounds(0, 0, 900, 160);

        cAcctLName.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        cAcctLName.setText("Last Name:");
        CreateAcct.add(cAcctLName);
        cAcctLName.setBounds(290, 350, 80, 30);

        cAcctFName.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        cAcctFName.setText("First Name:");
        CreateAcct.add(cAcctFName);
        cAcctFName.setBounds(290, 310, 80, 30);

        cAcctAddress.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        cAcctAddress.setText("Address:");
        CreateAcct.add(cAcctAddress);
        cAcctAddress.setBounds(290, 390, 70, 30);

        cAcctPNum.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        cAcctPNum.setText("Phone Number:");
        CreateAcct.add(cAcctPNum);
        cAcctPNum.setBounds(290, 430, 100, 30);

        cAcctType.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        cAcctType.setText("Type:");
        CreateAcct.add(cAcctType);
        cAcctType.setBounds(290, 480, 100, 30);
        CreateAcct.add(JTFName);
        JTFName.setBounds(480, 310, 170, 26);
        CreateAcct.add(JTLName);
        JTLName.setBounds(480, 350, 170, 26);
        CreateAcct.add(JTAddress);
        JTAddress.setBounds(480, 390, 170, 26);
        CreateAcct.add(JTPNum);
        JTPNum.setBounds(480, 430, 170, 26);

        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Administrator", "Doctor", "Patient" }));
        CreateAcct.add(type);
        type.setBounds(490, 480, 140, 27);

        jLabel83.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel83.setText("Ex. 987-654-3201");
        CreateAcct.add(jLabel83);
        jLabel83.setBounds(490, 450, 90, 13);

        jLabel84.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel84.setText("Ex. 1234 Tweedle St. Los Angeles, CA 12356");
        CreateAcct.add(jLabel84);
        jLabel84.setBounds(490, 410, 220, 13);

        background2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        CreateAcct.add(background2);
        background2.setBounds(0, 0, 1000, 700);

        placeholder.add(CreateAcct, "card4");

        createEvnt.setBackground(new java.awt.Color(255, 255, 255));
        createEvnt.setLayout(null);

        eError.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        eError.setForeground(new java.awt.Color(204, 0, 51));
        eError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eError.setText("   ");
        createEvnt.add(eError);
        eError.setBounds(0, 140, 900, 30);

        jLabel17.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel17.setText("Ex. \"Mom's Birthday\"");
        createEvnt.add(jLabel17);
        jLabel17.setBounds(390, 270, 240, 16);

        jLabel18.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel18.setText("Ex. \"Mile Square Regional Park\"");
        createEvnt.add(jLabel18);
        jLabel18.setBounds(390, 420, 240, 16);

        jLabel39.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel39.setText("Ex. \"It's a surprise. Don't tell her.\"");
        createEvnt.add(jLabel39);
        jLabel39.setBounds(390, 540, 240, 16);

        eTitle.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eTitle.setText("Title");
        createEvnt.add(eTitle);
        eTitle.setBounds(270, 250, 25, 30);

        eStartDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eStartDate.setText("Start Date");
        createEvnt.add(eStartDate);
        eStartDate.setBounds(150, 310, 59, 40);
        createEvnt.add(sDateChooser);
        sDateChooser.setBounds(260, 310, 170, 26);
        createEvnt.add(eDateChooser);
        eDateChooser.setBounds(260, 350, 170, 26);

        eEndDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEndDate.setText("End Date");
        createEvnt.add(eEndDate);
        eEndDate.setBounds(150, 350, 54, 30);

        eLocation.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eLocation.setText("Location");
        createEvnt.add(eLocation);
        eLocation.setBounds(270, 390, 49, 50);

        eDesc.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eDesc.setText("Description");
        createEvnt.add(eDesc);
        eDesc.setBounds(270, 450, 65, 30);

        locTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locTFActionPerformed(evt);
            }
        });
        createEvnt.add(locTF);
        locTF.setBounds(380, 400, 250, 26);
        createEvnt.add(descTF);
        descTF.setBounds(380, 450, 250, 91);
        createEvnt.add(titleTF);
        titleTF.setBounds(380, 250, 250, 26);

        backFromCreateEvnt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        backFromCreateEvnt.setText("Back");
        backFromCreateEvnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromCreateEvntActionPerformed(evt);
            }
        });
        createEvnt.add(backFromCreateEvnt);
        backFromCreateEvnt.setBounds(390, 600, 75, 29);

        cEvntTitle.setFont(new java.awt.Font("Mark My Words", 0, 48)); // NOI18N
        cEvntTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cEvntTitle.setText("Create Event");
        createEvnt.add(cEvntTitle);
        cEvntTitle.setBounds(0, 0, 900, 160);

        eTitle1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        eTitle1.setForeground(new java.awt.Color(102, 102, 102));
        eTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eTitle1.setText("Every box must be filled out in order to create an event.");
        createEvnt.add(eTitle1);
        eTitle1.setBounds(10, 170, 900, 70);

        eStartTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eStartTime.setText("Start Time");
        createEvnt.add(eStartTime);
        eStartTime.setBounds(520, 310, 70, 30);

        eEndTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEndTime.setText("End Time");
        createEvnt.add(eEndTime);
        eEndTime.setBounds(520, 350, 70, 30);

        Date createEventDate = new Date();
        SpinnerDateModel createEventSM = new SpinnerDateModel(createEventDate, null, null, Calendar.HOUR_OF_DAY);
        createEventStartTime.setModel(createEventSM);
        JSpinner.DateEditor createEventAR = new JSpinner.DateEditor(createEventStartTime, "HH:mm");
        createEventStartTime.setEditor(createEventAR);
        createEventStartTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        createEvnt.add(createEventStartTime);
        createEventStartTime.setBounds(620, 310, 100, 26);

        Date createEventDate2 = new Date();
        SpinnerDateModel createEventSM2 = new SpinnerDateModel(createEventDate2, null, null, Calendar.HOUR_OF_DAY);
        createEventEndTime.setModel(createEventSM2);
        JSpinner.DateEditor createEventAR2 = new JSpinner.DateEditor(createEventEndTime, "HH:mm");
        createEventEndTime.setEditor(createEventAR2);
        createEventEndTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        createEvnt.add(createEventEndTime);
        createEventEndTime.setBounds(620, 350, 100, 26);

        evButton.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        evButton.setText("Create");
        evButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evButtonActionPerformed(evt);
            }
        });
        createEvnt.add(evButton);
        evButton.setBounds(520, 600, 97, 29);

        background4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        createEvnt.add(background4);
        background4.setBounds(0, 0, 1000, 800);

        placeholder.add(createEvnt, "card9");

        editEvnt.setBackground(new java.awt.Color(255, 255, 255));
        editEvnt.setLayout(null);

        eEventError.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        eEventError.setForeground(new java.awt.Color(255, 0, 0));
        eEventError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editEvnt.add(eEventError);
        eEventError.setBounds(0, 171, 900, 20);

        eEventList.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        eEventList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                eEventListItemStateChanged(evt);
            }
        });
        eEventList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eEventListActionPerformed(evt);
            }
        });
        editEvnt.add(eEventList);
        eEventList.setBounds(250, 210, 210, 27);

        eEventChange1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventChange1.setText("Change");
        eEventChange1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eEventChange1ActionPerformed(evt);
            }
        });
        editEvnt.add(eEventChange1);
        eEventChange1.setBounds(340, 520, 88, 29);

        eEventChange2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventChange2.setText("Change");
        eEventChange2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eEventChange2ActionPerformed(evt);
            }
        });
        editEvnt.add(eEventChange2);
        eEventChange2.setBounds(340, 520, 88, 29);

        eEventChange3.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventChange3.setText("Change");
        eEventChange3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eEventChange3ActionPerformed(evt);
            }
        });
        editEvnt.add(eEventChange3);
        eEventChange3.setBounds(340, 520, 88, 29);

        evNo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        evNo.setText("Event No.");
        editEvnt.add(evNo);
        evNo.setBounds(120, 210, 58, 30);

        eEventAtt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventAtt.setText("Edit...");
        editEvnt.add(eEventAtt);
        eEventAtt.setBounds(120, 270, 35, 30);

        newInfoEvent.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        newInfoEvent.setText("New Info");
        editEvnt.add(newInfoEvent);
        newInfoEvent.setBounds(120, 350, 51, 16);

        eventOptions.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eventOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EVENTNAME", "STARTDATE", "ENDDATE", "LOCATION", "DESCRIPTION", "STARTTIME", "ENDTIME", "REMINDER" }));
        eventOptions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                eventOptionsItemStateChanged(evt);
            }
        });
        editEvnt.add(eventOptions);
        eventOptions.setBounds(250, 270, 210, 27);

        editEvntTitle.setFont(new java.awt.Font("Mark My Words", 0, 48)); // NOI18N
        editEvntTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editEvntTitle.setText("Edit Event");
        editEvnt.add(editEvntTitle);
        editEvntTitle.setBounds(0, 0, 900, 160);

        backFromEditEvent.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        backFromEditEvent.setText("Back");
        backFromEditEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromEditEventActionPerformed(evt);
            }
        });
        editEvnt.add(backFromEditEvent);
        backFromEditEvent.setBounds(190, 520, 75, 30);

        eEventDateChooser.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        editEvnt.add(eEventDateChooser);
        eEventDateChooser.setBounds(260, 350, 190, 26);

        infoEventTF.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        infoEventTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        editEvnt.add(infoEventTF);
        infoEventTF.setBounds(250, 345, 210, 60);

        editProxCombo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        editProxCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "At time of event", "5 minutes before", "15 minutes before", "30 minutes before", "1 hour before", "1 day before", "1 week before" }));
        editProxCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProxComboActionPerformed(evt);
            }
        });
        editEvnt.add(editProxCombo);
        editProxCombo.setBounds(250, 347, 210, 40);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        jLabel45.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel45.setText("Event Information");

        jLabel47.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel47.setText("Name:");

        jLabel48.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel48.setText("Start Date:");

        jLabel49.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel49.setText("End Date:");

        jLabel50.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel50.setText("Location:");

        jLabel51.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel51.setText("Description:");

        eEventName.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventName.setText("  ");

        eEventSDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventSDate.setText("  ");

        eEventLocation.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventLocation.setText("  ");

        eEventEDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventEDate.setText("  ");

        eEventDescription.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEventDescription.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        eEventDescription.setText("  ");
        eEventDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel85.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel85.setText("Start Time:");

        jLabel86.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel86.setText("End Time:");

        eEventSTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        eEventETime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        jLabel121.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel121.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel121.setText("Reminder Information");

        reminderTimeEdit.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        reminderTimeEdit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel121, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel45, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                            .addComponent(jLabel48)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(eEventSDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                            .addComponent(jLabel49)
                                            .addGap(18, 18, 18)
                                            .addComponent(eEventEDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                            .addComponent(jLabel47)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(eEventName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                            .addComponent(jLabel50)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(eEventLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel51)
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel85)
                                            .addComponent(jLabel86))
                                        .addGap(25, 25, 25)
                                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(eEventSTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(eEventETime, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(eEventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 35, Short.MAX_VALUE))
                            .addComponent(reminderTimeEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel45)
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(eEventName))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(eEventSDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(eEventEDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel85)
                    .addComponent(eEventSTime, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel86, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eEventETime, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eEventLocation)
                    .addComponent(jLabel50))
                .addGap(18, 18, 18)
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eEventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel121)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reminderTimeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel11);

        editEvnt.add(jScrollPane2);
        jScrollPane2.setBounds(580, 150, 260, 430);

        background5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        editEvnt.add(background5);
        background5.setBounds(0, 0, 1000, 800);

        placeholder.add(editEvnt, "card10");

        deleteEvnt.setBackground(new java.awt.Color(255, 255, 255));
        deleteEvnt.setPreferredSize(new java.awt.Dimension(900, 700));
        deleteEvnt.setLayout(null);

        dEventList.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEventList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dEventListItemStateChanged(evt);
            }
        });
        dEventList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dEventListActionPerformed(evt);
            }
        });
        deleteEvnt.add(dEventList);
        dEventList.setBounds(260, 270, 150, 27);

        backFromDeleteEvnt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        backFromDeleteEvnt.setText("Back");
        backFromDeleteEvnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromDeleteEvntActionPerformed(evt);
            }
        });
        deleteEvnt.add(backFromDeleteEvnt);
        backFromDeleteEvnt.setBounds(160, 330, 75, 29);

        dEventTitle.setFont(new java.awt.Font("Mark My Words", 0, 48)); // NOI18N
        dEventTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dEventTitle.setText("Delete Event");
        deleteEvnt.add(dEventTitle);
        dEventTitle.setBounds(0, 0, 900, 160);

        dEventInfo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEventInfo.setText("Event Name to delete:");
        deleteEvnt.add(dEventInfo);
        dEventInfo.setBounds(110, 270, 140, 30);

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        jLabel52.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel52.setText("Event Information");

        jLabel54.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel54.setText("Name:");

        jLabel55.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel55.setText("Start Date:");

        jLabel56.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel56.setText("End Date:");

        jLabel57.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel57.setText("Location:");

        jLabel58.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel58.setText("Description:");

        dEventName.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEventName.setText("  ");

        dEventSDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEventSDate.setText("  ");

        dEventLocation.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEventLocation.setText("  ");

        dEventEDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEventEDate.setText("  ");

        jLabel87.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel87.setText("Start Time:");

        dEventDescription.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEventDescription.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dEventDescription.setText("  ");
        dEventDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel88.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel88.setText("End Time:");

        dEventSTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        dEventETime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel58)
                            .addComponent(dEventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel87)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dEventSTime, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel52))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel88)
                            .addComponent(jLabel57))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dEventLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dEventETime, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel55)
                            .addComponent(jLabel54)
                            .addComponent(jLabel56))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(dEventEDate, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(dEventName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dEventSDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel52)
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(dEventName))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(dEventSDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(dEventEDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel87)
                    .addComponent(dEventSTime, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel88, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dEventETime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel57)
                    .addComponent(dEventLocation))
                .addGap(18, 18, 18)
                .addComponent(jLabel58)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dEventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel12);

        deleteEvnt.add(jScrollPane3);
        jScrollPane3.setBounds(520, 220, 240, 340);

        deleteChoice.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        deleteChoice.setText("Delete");
        deleteChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChoiceActionPerformed(evt);
            }
        });
        deleteEvnt.add(deleteChoice);
        deleteChoice.setBounds(270, 330, 81, 29);

        jLabel46.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel46.setText("Are you sure you want to delete this event?");

        dEvnt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dEvnt.setText("Yes");
        dEvnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dEvntActionPerformed(evt);
            }
        });

        backFromConfirm.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        backFromConfirm.setText("No");
        backFromConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionDeleteLayout = new javax.swing.GroupLayout(optionDelete);
        optionDelete.setLayout(optionDeleteLayout);
        optionDeleteLayout.setHorizontalGroup(
            optionDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionDeleteLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel46)
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionDeleteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backFromConfirm)
                .addGap(18, 18, 18)
                .addComponent(dEvnt)
                .addGap(60, 60, 60))
        );
        optionDeleteLayout.setVerticalGroup(
            optionDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionDeleteLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel46)
                .addGap(18, 18, 18)
                .addGroup(optionDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dEvnt)
                    .addComponent(backFromConfirm))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        deleteEvnt.add(optionDelete);
        optionDelete.setBounds(110, 380, 290, 100);

        background6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        deleteEvnt.add(background6);
        background6.setBounds(0, 0, 1000, 800);

        placeholder.add(deleteEvnt, "card11");

        settings.setBackground(new java.awt.Color(255, 255, 255));
        settings.setPreferredSize(new java.awt.Dimension(900, 700));
        settings.setLayout(null);

        cRemTitle4.setFont(new java.awt.Font("Mark My Words", 0, 48)); // NOI18N
        cRemTitle4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cRemTitle4.setText("Settings");
        cRemTitle4.setMaximumSize(new java.awt.Dimension(900, 600));
        cRemTitle4.setMinimumSize(new java.awt.Dimension(900, 600));
        settings.add(cRemTitle4);
        cRemTitle4.setBounds(0, 0, 900, 160);

        jLabel38.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setText("What to do??????");
        jLabel38.setSize(new java.awt.Dimension(900, 16));
        settings.add(jLabel38);
        jLabel38.setBounds(0, 132, 900, 16);

        jLabel40.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("Change whether you want First Appointment or Current Day:");
        settings.add(jLabel40);
        jLabel40.setBounds(0, 360, 900, 16);

        jLabel63.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel63.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel63.setText("Change Default Color:");
        settings.add(jLabel63);
        jLabel63.setBounds(0, 180, 900, 16);

        homeCalButtonGroup.add(changeCalendar);
        changeCalendar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeCalendar.setText("Calendar");
        settings.add(changeCalendar);
        changeCalendar.setBounds(570, 320, 100, 23);

        homeCalButtonGroup.add(changeMonth);
        changeMonth.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeMonth.setText("Month");
        changeMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeMonthActionPerformed(evt);
            }
        });
        settings.add(changeMonth);
        changeMonth.setBounds(450, 320, 90, 23);

        homeCalButtonGroup.add(changeWeek);
        changeWeek.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeWeek.setText("Week");
        settings.add(changeWeek);
        changeWeek.setBounds(340, 320, 80, 23);

        homeCalButtonGroup.add(changeDay);
        changeDay.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeDay.setText("Day");
        changeDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeDayActionPerformed(evt);
            }
        });
        settings.add(changeDay);
        changeDay.setBounds(230, 320, 70, 23);

        calCoverPageButtonGroup.add(changeFirstAppt);
        changeFirstAppt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeFirstAppt.setText("First Appointment");
        settings.add(changeFirstAppt);
        changeFirstAppt.setBounds(450, 380, 170, 23);

        changeColor.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeColor.setText("Change");
        changeColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeColorActionPerformed(evt);
            }
        });
        settings.add(changeColor);
        changeColor.setBounds(380, 230, 160, 29);

        jLabel110.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel110.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel110.setText("Change your Homepage Calendar:");
        settings.add(jLabel110);
        jLabel110.setBounds(0, 290, 900, 16);

        calCoverPageButtonGroup.add(changeCurrentDay);
        changeCurrentDay.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeCurrentDay.setText("Current Day");
        settings.add(changeCurrentDay);
        changeCurrentDay.setBounds(290, 380, 170, 23);

        changeSettings.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeSettings.setText("Change");
        changeSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeSettingsActionPerformed(evt);
            }
        });
        settings.add(changeSettings);
        changeSettings.setBounds(360, 420, 160, 29);

        jLabel94.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel94.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel94.setText("Change the way you receive your reminders:");
        settings.add(jLabel94);
        jLabel94.setBounds(0, 590, 900, 16);

        changeStartTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeStartTime.setText("Change Start Time");
        changeStartTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeStartTimeActionPerformed(evt);
            }
        });
        settings.add(changeStartTime);
        changeStartTime.setBounds(300, 530, 140, 29);

        changeEndTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeEndTime.setText("Change End Time");
        changeEndTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeEndTimeActionPerformed(evt);
            }
        });
        settings.add(changeEndTime);
        changeEndTime.setBounds(460, 530, 140, 29);

        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        settingsStartTime.setModel(sm);
        JSpinner.DateEditor ar = new JSpinner.DateEditor(settingsStartTime, "HH:mm");
        settingsStartTime.setEditor(ar);
        settingsStartTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        settings.add(settingsStartTime);
        settingsStartTime.setBounds(320, 500, 100, 26);

        Date date1 = new Date();
        SpinnerDateModel sm1 = new SpinnerDateModel(date1, null, null, Calendar.HOUR_OF_DAY);
        settingsEndTime.setModel(sm1);
        JSpinner.DateEditor ar1 = new JSpinner.DateEditor(settingsEndTime, "HH:mm");
        settingsEndTime.setEditor(ar1);
        settingsEndTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        settings.add(settingsEndTime);
        settingsEndTime.setBounds(480, 500, 100, 26);

        jLabel120.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel120.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel120.setText("Change your office hours start and end time:");
        settings.add(jLabel120);
        jLabel120.setBounds(0, 450, 900, 16);

        officeHourError.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        officeHourError.setForeground(new java.awt.Color(255, 0, 0));
        officeHourError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        settings.add(officeHourError);
        officeHourError.setBounds(10, 470, 900, 20);

        defaultColorButtonGroup.add(changeGreen);
        changeGreen.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeGreen.setText("Green");
        settings.add(changeGreen);
        changeGreen.setBounds(470, 200, 80, 23);

        defaultColorButtonGroup.add(changeBlue);
        changeBlue.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeBlue.setText("Blue");
        settings.add(changeBlue);
        changeBlue.setBounds(360, 200, 80, 23);

        defaultColorButtonGroup.add(changeRed);
        changeRed.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeRed.setText("Red");
        settings.add(changeRed);
        changeRed.setBounds(260, 200, 55, 23);

        defaultColorButtonGroup.add(changeDefault);
        changeDefault.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        changeDefault.setText("Default");
        settings.add(changeDefault);
        changeDefault.setBounds(580, 200, 80, 23);

        reminderSetting.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        reminderSetting.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Text Message", "Email" }));
        settings.add(reminderSetting);
        reminderSetting.setBounds(310, 620, 170, 27);

        reminderSettingChange.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        reminderSettingChange.setText("Change");
        reminderSettingChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reminderSettingChangeActionPerformed(evt);
            }
        });
        settings.add(reminderSettingChange);
        reminderSettingChange.setBounds(490, 620, 88, 29);

        background13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background13.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        settings.add(background13);
        background13.setBounds(0, 0, 1000, 800);

        placeholder.add(settings, "card15");

        help.setBackground(new java.awt.Color(255, 255, 255));
        help.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        help.setLayout(null);

        jLabel41.setFont(new java.awt.Font("Mark My Words", 0, 48)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("Help");
        help.add(jLabel41);
        jLabel41.setBounds(0, 0, 900, 160);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel42.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("Hello! What can we help you with?");

        jLabel43.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setText("Browse our Help Topics by clicking the tabs above");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel43)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout welcomeLayout = new javax.swing.GroupLayout(welcome);
        welcome.setLayout(welcomeLayout);
        welcomeLayout.setHorizontalGroup(
            welcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        welcomeLayout.setVerticalGroup(
            welcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Welcome", welcome);

        creatingAnAccount.setBackground(new java.awt.Color(255, 255, 255));

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextArea3.setRows(5);
        jTextArea3.setText("When creating an UpToDate account, type in your desired username and\npassword. Your username cannot be changed once it has been created.\nBecause your username uniquely defines your account, we do not allow users\nto have the same username.\n\nOnce you have created an account, you are now able to use the features\nof UpToDate.");
        jTextArea3.setWrapStyleWord(true);
        jScrollPane9.setViewportView(jTextArea3);

        javax.swing.GroupLayout creatingAnAccountLayout = new javax.swing.GroupLayout(creatingAnAccount);
        creatingAnAccount.setLayout(creatingAnAccountLayout);
        creatingAnAccountLayout.setHorizontalGroup(
            creatingAnAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, creatingAnAccountLayout.createSequentialGroup()
                .addContainerGap(129, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        creatingAnAccountLayout.setVerticalGroup(
            creatingAnAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creatingAnAccountLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Creating An Account", creatingAnAccount);

        signIn.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("In order to sign in, you must have an UpToDate account,complete with a \nusername and password. If you do not have an account, create one before \nsigning in.\n\nIf you do have an account, all that is needed to sign in is to press the 'Sign In' \nbutton on the front page and type in your username and password. Please note \nthat an incorrect username and/or password will prevent you from entering the \napplication.\n\nOnce you have signed in with a valid username and password, you are allowed \nto access the application. Now you are able to view a calendar with events \ndisplayed, as well as creating events and reminders.");
        jTextArea1.setSize(new java.awt.Dimension(425, 300));
        jScrollPane7.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(129, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout signInLayout = new javax.swing.GroupLayout(signIn);
        signIn.setLayout(signInLayout);
        signInLayout.setHorizontalGroup(
            signInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
            .addGroup(signInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        signInLayout.setVerticalGroup(
            signInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
            .addGroup(signInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sign In", signIn);

        events.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextArea4.setRows(5);
        jTextArea4.setText("Events allow users to be updated on current news on a specific day. Users can\nalso modify when the event occurs.\n\nCreate Event:\nEvents can be created on any given day. Once the user has decided on what\nevent to create, they will list the 'Name', 'Start Date', 'End Date', 'Location', and\n'Description' on the panel. An event cannot be created without including all of \nthe information. \n\nEdit Event:\nIf a user finds an error in their event, they have the choice to edit it. All pieces\nof information can be edited. The user can edit 'Name', 'Location', or \n'Description' by typing in their edited information. The user can edit 'Start Date'\nor 'End Date' by choosing their desired date.\n\nDelete Event:\nA user can delete an event if they desire to by selecting the appropriate event\nnumber that corresponds with the event. The event information will be \ndisplayed so that the user can view which event they would like to delete.\nIf the event is not listed, it was already deleted/was never in the system.");
        jTextArea4.setWrapStyleWord(true);
        jTextArea4.setPreferredSize(new java.awt.Dimension(480, 320));
        jScrollPane10.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout eventsLayout = new javax.swing.GroupLayout(events);
        events.setLayout(eventsLayout);
        eventsLayout.setHorizontalGroup(
            eventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
            .addGroup(eventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        eventsLayout.setVerticalGroup(
            eventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
            .addGroup(eventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Events", events);

        reminders.setBackground(new java.awt.Color(255, 255, 255));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText("Reminders allow users to be notified of upcoming events on a\nspecific day at a specific time. Users can also modify the\nfrequency in which they are notified (frequencies include daily, \nweekly, monthly, and yearly).\n\nCreate Reminder:\nReminders can be created using any existing event. Once the user\nhas chosen the desired event, one selects the date, time, and\nfrequency to be reminded. Note that a reminder cannot be\ncreated if any of these attributes do not have information\nor if the reminder date comes after the event date.\n\nEdit Reminder:\nUsers begin editing by selecting the reminder to be edited.\nThis is done by selecting the event date and reminder time, and\npressing the view button to see the desired reminder.\nAfter that, select the attribute you want to change (reminderDate,\nreminderTime, and frequency) and type in the appropriate\ninformation in the text box below. Click the edit button to\ncomplete the editing process. Note that a reminder cannot be\nedited unless all the editing steps have been completed.\n\nDelete Reminder:\nUsers begin deleting a reminder by selecting the reminder to be\ndeleted. Similar to how you select the reminder to be edited,\nusers select the event date and reminder time, and press the\nview button to see the desired reminder. Click the delete button\nto complete the deletion process. Note that a reminder cannot\nbe deleted unless all the deletion steps have been completed\n");
        jScrollPane8.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout remindersLayout = new javax.swing.GroupLayout(reminders);
        reminders.setLayout(remindersLayout);
        remindersLayout.setHorizontalGroup(
            remindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
            .addGroup(remindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        remindersLayout.setVerticalGroup(
            remindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
            .addGroup(remindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reminders", reminders);

        help.add(jTabbedPane1);
        jTabbedPane1.setBounds(70, 170, 750, 390);

        background14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background14.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        help.add(background14);
        background14.setBounds(0, 0, 1000, 700);

        placeholder.add(help, "card16");

        viewUsers.setPreferredSize(new java.awt.Dimension(900, 700));
        viewUsers.setLayout(null);

        cRemTitle5.setFont(new java.awt.Font("Mark My Words", 0, 48)); // NOI18N
        cRemTitle5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cRemTitle5.setText("View Users");
        cRemTitle5.setMaximumSize(new java.awt.Dimension(900, 600));
        cRemTitle5.setMinimumSize(new java.awt.Dimension(900, 600));
        viewUsers.add(cRemTitle5);
        cRemTitle5.setBounds(0, 0, 900, 160);

        userType.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        userType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patients", "Doctors", "Administrators", "All Users" }));
        userType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userTypeItemStateChanged(evt);
            }
        });
        viewUsers.add(userType);
        userType.setBounds(370, 170, 170, 27);

        viewUserTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        viewUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Type", "Username", "First Name", "Last Name", "Address", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewUserTable.getTableHeader().setResizingAllowed(false);
        viewUserTable.getTableHeader().setReorderingAllowed(false);
        viewUserTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                viewUserTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewUserTableMouseClicked(evt);
            }
        });
        userTable.setViewportView(viewUserTable);
        if (viewUserTable.getColumnModel().getColumnCount() > 0) {
            viewUserTable.getColumnModel().getColumn(0).setResizable(false);
            viewUserTable.getColumnModel().getColumn(1).setResizable(false);
            viewUserTable.getColumnModel().getColumn(2).setResizable(false);
            viewUserTable.getColumnModel().getColumn(3).setResizable(false);
            viewUserTable.getColumnModel().getColumn(4).setResizable(false);
            viewUserTable.getColumnModel().getColumn(5).setResizable(false);
        }

        viewUsers.add(userTable);
        userTable.setBounds(60, 240, 770, 240);

        background15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background15.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        viewUsers.add(background15);
        background15.setBounds(0, 0, 1000, 800);

        placeholder.add(viewUsers, "card17");

        createEvntEmp.setBackground(new java.awt.Color(255, 255, 255));
        createEvntEmp.setLayout(null);

        eError1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        eError1.setForeground(new java.awt.Color(204, 0, 51));
        eError1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eError1.setText("   ");
        createEvntEmp.add(eError1);
        eError1.setBounds(0, 110, 900, 30);

        jLabel82.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel82.setText("Ex. \"Mom's Birthday\"");
        createEvntEmp.add(jLabel82);
        jLabel82.setBounds(390, 270, 240, 16);

        jLabel108.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel108.setText("Ex. \"Mile Square Regional Park\"");
        createEvntEmp.add(jLabel108);
        jLabel108.setBounds(190, 420, 240, 16);

        jLabel111.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        jLabel111.setText("Ex. \"It's a surprise. Don't tell her.\"");
        createEvntEmp.add(jLabel111);
        jLabel111.setBounds(190, 540, 240, 16);

        eTitle2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eTitle2.setText("Title");
        createEvntEmp.add(eTitle2);
        eTitle2.setBounds(270, 250, 25, 30);

        eStartDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eStartDate1.setText("Start Date");
        createEvntEmp.add(eStartDate1);
        eStartDate1.setBounds(150, 310, 59, 40);
        createEvntEmp.add(sDateChooser1);
        sDateChooser1.setBounds(260, 310, 170, 26);
        createEvntEmp.add(eDateChooser1);
        eDateChooser1.setBounds(260, 350, 170, 26);

        eEndDate1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEndDate1.setText("End Date");
        createEvntEmp.add(eEndDate1);
        eEndDate1.setBounds(150, 350, 54, 30);

        eLocation1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eLocation1.setText("Location");
        createEvntEmp.add(eLocation1);
        eLocation1.setBounds(70, 390, 49, 50);

        eDesc1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eDesc1.setText("Description");
        createEvntEmp.add(eDesc1);
        eDesc1.setBounds(70, 450, 65, 30);

        locTF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locTF1ActionPerformed(evt);
            }
        });
        createEvntEmp.add(locTF1);
        locTF1.setBounds(180, 400, 250, 26);
        createEvntEmp.add(descTF1);
        descTF1.setBounds(180, 450, 250, 91);
        createEvntEmp.add(titleTF1);
        titleTF1.setBounds(380, 250, 250, 26);

        backFromCreateEvnt1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        backFromCreateEvnt1.setText("Back");
        backFromCreateEvnt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromCreateEvnt1ActionPerformed(evt);
            }
        });
        createEvntEmp.add(backFromCreateEvnt1);
        backFromCreateEvnt1.setBounds(120, 590, 75, 29);

        cEvntTitle1.setFont(new java.awt.Font("Mark My Words", 0, 48)); // NOI18N
        cEvntTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cEvntTitle1.setText("Create Event");
        createEvntEmp.add(cEvntTitle1);
        cEvntTitle1.setBounds(0, -10, 900, 170);

        eTitle3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        eTitle3.setForeground(new java.awt.Color(102, 102, 102));
        eTitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eTitle3.setText("Every box must be filled out in order to create an event.");
        createEvntEmp.add(eTitle3);
        eTitle3.setBounds(0, 210, 900, 30);

        eStartTime1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eStartTime1.setText("Start Time");
        createEvntEmp.add(eStartTime1);
        eStartTime1.setBounds(520, 310, 70, 30);

        eEndTime1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eEndTime1.setText("End Time");
        createEvntEmp.add(eEndTime1);
        eEndTime1.setBounds(520, 350, 70, 30);

        Date createEventEmpDate = new Date();
        SpinnerDateModel createEventEmpSM = new SpinnerDateModel(createEventEmpDate, null, null, Calendar.HOUR_OF_DAY);
        createEventEmpStartTime.setModel(createEventEmpSM);
        JSpinner.DateEditor createEventEmpAR = new JSpinner.DateEditor(createEventEmpStartTime, "HH:mm");
        createEventEmpStartTime.setEditor(createEventEmpAR);
        createEventEmpStartTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        createEvntEmp.add(createEventEmpStartTime);
        createEventEmpStartTime.setBounds(620, 310, 100, 26);

        Date createEventEmpDate1 = new Date();
        SpinnerDateModel createEventEmpSM1 = new SpinnerDateModel(createEventEmpDate, null, null, Calendar.HOUR_OF_DAY);
        createEventEmpEndTime.setModel(createEventEmpSM1);
        JSpinner.DateEditor createEventEmpAR1 = new JSpinner.DateEditor(createEventEmpEndTime, "HH:mm");
        createEventEmpEndTime.setEditor(createEventEmpAR1);
        createEventEmpEndTime.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        createEvntEmp.add(createEventEmpEndTime);
        createEventEmpEndTime.setBounds(620, 350, 100, 26);

        jLabel112.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel112.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel112.setText("You are currently creating an event for:");
        createEvntEmp.add(jLabel112);
        jLabel112.setBounds(0, 160, 900, 16);

        usernameEvent.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        usernameEvent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        usernameEvent.setText(" ");
        createEvntEmp.add(usernameEvent);
        usernameEvent.setBounds(0, 180, 900, 22);

        eventButton.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        eventButton.setText("Create");
        eventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventButtonActionPerformed(evt);
            }
        });
        createEvntEmp.add(eventButton);
        eventButton.setBounds(300, 590, 82, 29);

        background16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        background16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uptodate/DefaultBackground.jpg"))); // NOI18N
        background16.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        createEvntEmp.add(background16);
        background16.setBounds(0, 0, 1000, 800);

        placeholder.add(createEvntEmp, "card9");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(placeholder, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(placeholder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        HomeTab.setText("Home");
        HomeTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        HomeTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeTabActionPerformed(evt);
            }
        });

        goHome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        goHome.setText("Go Home");
        goHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goHomeActionPerformed(evt);
            }
        });
        HomeTab.add(goHome);

        jMenuBar1.add(HomeTab);

        AccountTab.setText("Account");
        AccountTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        AccountTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccountTabActionPerformed(evt);
            }
        });

        viewAccount.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        viewAccount.setText("View Account");
        viewAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAccountActionPerformed(evt);
            }
        });
        AccountTab.add(viewAccount);

        jMenuBar1.add(AccountTab);

        EControlTab.setText("Employee Controls");
        EControlTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        viewUsersItem.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        viewUsersItem.setText("View Users");
        viewUsersItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewUsersItemActionPerformed(evt);
            }
        });
        EControlTab.add(viewUsersItem);

        createUserAcctEmp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        createUserAcctEmp.setText("Create an Account");
        createUserAcctEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserAcctEmpActionPerformed(evt);
            }
        });
        EControlTab.add(createUserAcctEmp);

        jMenuBar1.add(EControlTab);

        EventTab.setText("Event");
        EventTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        createEvent.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        createEvent.setText("Create");
        createEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createEventActionPerformed(evt);
            }
        });
        EventTab.add(createEvent);

        editEvent.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        editEvent.setText("Edit");
        editEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEventActionPerformed(evt);
            }
        });
        EventTab.add(editEvent);

        deleteEvent.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        deleteEvent.setText("Delete");
        deleteEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEventActionPerformed(evt);
            }
        });
        EventTab.add(deleteEvent);

        jMenuBar1.add(EventTab);

        SettingsTab.setText("Settings");
        SettingsTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        Settings.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Settings.setText("Appearance");
        Settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsActionPerformed(evt);
            }
        });
        SettingsTab.add(Settings);

        jMenuBar1.add(SettingsTab);

        HelpTab.setText("Help");
        HelpTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        goToHelp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        goToHelp.setText("Help!!!!!!!");
        goToHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToHelpActionPerformed(evt);
            }
        });
        HelpTab.add(goToHelp);

        jMenuBar1.add(HelpTab);

        SignOutTab.setText("Sign Out");
        SignOutTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        SignOutTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignOutTabActionPerformed(evt);
            }
        });

        signOut.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        signOut.setText("Sign Out");
        signOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutActionPerformed(evt);
            }
        });
        SignOutTab.add(signOut);

        jMenuBar1.add(SignOutTab);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPFPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPFPasswordActionPerformed
    }//GEN-LAST:event_jPFPasswordActionPerformed

    private void JBCreateAcctActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCreateAcctActionPerformed
        USERNAME = JTUsername.getText();
        PASSWORD = String.valueOf(jPFPassword.getPassword());
        String fName = JTFName.getText();
        String lName = JTLName.getText();
        String address = JTAddress.getText();
        String pNum = JTPNum.getText();
        String acctType = type.getSelectedItem().toString();

        try {
            PreparedStatement ps = null;
            String sql = "SELECT * FROM \"USER\" WHERE LOWER(username) = LOWER(?)";

            ps = conn.prepareStatement(sql);
            ps.setString(1, USERNAME);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                JLAlert.setText("Error. Try a different username.");
                USERNAME = JTUsername.getText();
                ps.setString(1, USERNAME);
                rs = ps.executeQuery();
            }
            else if (USERNAME.length() > 40 || USERNAME.length() < 1) {
                JLAlert.setText("Length must be between 1 and 40. Try again.");
            }
            else {
                PreparedStatement pstmt = null;
                String sql1 = "INSERT INTO \"USER\" VALUES (?,?,?,?,?,?,?)";

                if (fName.equals("") || lName.equals("") || address.equals("") || pNum.equals("")) {
                    JLAlert.setText("All values must be filled. Try again.");
                }
                else {
                    pstmt = conn.prepareStatement(sql1);
                    pstmt.setString(1, USERNAME);
                    pstmt.setString(2, PASSWORD);
                    pstmt.setString(3, fName);
                    pstmt.setString(4, lName);
                    pstmt.setString(5, address);
                    pstmt.setString(6, pNum);
                    pstmt.setString(7, acctType);
                    pstmt.execute();

                    String sql2 = "INSERT INTO SETTINGS VALUES (?, ?, 'month', 'currentDay', 'default', '00:00:00', '00:00:00', 'email')";
                    PreparedStatement p = conn.prepareStatement(sql2);
                    p.setString(1, USERNAME);
                    if (acctType.equals("Doctor") || acctType.equals("Administrator")) {
                        p.setBoolean(2, true);
                    }
                    else if (acctType.equals("Patient")) {
                        p.setBoolean(2, false);
                    }
                    p.execute();

                    JLAlert.setText("Congratulations. A new account has been made. \n"
                            + "Click 'Back' to log in.");
                }
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }
    }//GEN-LAST:event_JBCreateAcctActionPerformed

    private void JBGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBGoBackActionPerformed
        if (!loggedIn) {
            goToFront();
        }
        else {
            placeholder.removeAll();
            placeholder.repaint();
            placeholder.revalidate();

            placeholder.add(viewUsers);
            placeholder.repaint();
            placeholder.revalidate();
        }
    }//GEN-LAST:event_JBGoBackActionPerformed

    private void editEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEventActionPerformed
        if (loggedIn) {
            placeholder.removeAll();
            placeholder.repaint();
            placeholder.revalidate();

            placeholder.add(editEvnt);
            eEventList();
            eEventDateChooser.setVisible(false);
            eEventChange2.setVisible(false);
            placeholder.repaint();
            placeholder.revalidate();
        }
        else {
            JDError.setVisible(true);
        }

    }//GEN-LAST:event_editEventActionPerformed

    private void deleteEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEventActionPerformed
        if (loggedIn) {
            placeholder.removeAll();
            placeholder.repaint();
            placeholder.revalidate();

            placeholder.add(deleteEvnt);
            optionDelete.setVisible(false);
            dEventList();
            placeholder.repaint();
            placeholder.revalidate();
        }
        else {
            JDError.setVisible(true);
        }
    }//GEN-LAST:event_deleteEventActionPerformed

    private void JBCreateAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCreateAccountActionPerformed
        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(CreateAcct);
        JBGoBack.setVisible(true);
        placeholder.repaint();
        placeholder.revalidate();

    }//GEN-LAST:event_JBCreateAccountActionPerformed

    private void JBSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBSignInActionPerformed
        USERNAME = JTUsername1.getText();
        PASSWORD = String.valueOf(JPWPass.getPassword());

        try {
            PreparedStatement ps = null;
            String signIn = "select username, password, firstname, lastname, address,pnum, usertype from \"USER\" where username = ? and password = ?";
            ps = conn.prepareStatement(signIn);
            ps.setString(1, USERNAME);
            ps.setString(2, PASSWORD);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                loggedIn = true;
                JLUsername.setText(USERNAME);
                JLPassword.setText(PASSWORD);

                JLFirstName.setText(rs.getString("firstname"));
                JLLastName.setText(rs.getString("lastname"));
                JLAddress.setText(rs.getString("address"));
                JLPhoneNum.setText(rs.getString("pnum"));
                JLType.setText(rs.getString("userType"));

                welcomeHomepage.setText("Welcome, " + USERNAME + "!");
                dateHomepage.setText(currentDay);

                settings();
                
                String op = "select contact from settings where username = ?";
                PreparedStatement opPS = conn.prepareStatement(op);
                opPS.setString(1, USERNAME);
                ResultSet rSet = opPS.executeQuery();
                if(rSet.next())
                {
                    String optionUser = rSet.getString("contact");
                    switch(optionUser)
                    {
                        case "email":
                            sendAlert();
                            break;
                        case "text":
                            sendMessage();
                            break;
                        default:
                            break;
                    }
                }
                
                //grants Employees access to specific panels/functions
                EControlTab.setVisible(hasAccess);

                placeholder.removeAll();
                placeholder.repaint();
                placeholder.revalidate();

                jMenuBar1.setVisible(loggedIn);
                placeholder.add(Homepage);
                placeholder.repaint();
                placeholder.revalidate();

            }
            else {
                JLError1.setText("Error. Wrong information.");
                loggedIn = false;
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }
    }//GEN-LAST:event_JBSignInActionPerformed

    private void JPWPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JPWPassActionPerformed

    }//GEN-LAST:event_JPWPassActionPerformed

    private void JTUsername1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTUsername1ActionPerformed

    }//GEN-LAST:event_JTUsername1ActionPerformed

    private void cEvntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cEvntActionPerformed
        boolean toContinue = false;

        String uName = USERNAME;
        String title = titleTF.getText();
        String sTime = format.format(createEventStartTime.getValue());
        String eTime = format.format(createEventEndTime.getValue());
        String locn = locTF.getText();
        String descrpn = descTF.getText();
        Date sDDate = sDateChooser.getDate();
        Date eDDate = eDateChooser.getDate();

        java.sql.Date sDate = new java.sql.Date(sDDate.getTime());
        java.sql.Date eDate = new java.sql.Date(sDDate.getTime());

        if (title.isEmpty() || locn.isEmpty() || descrpn.isEmpty() || sTime.isEmpty() || eTime.isEmpty()
                || sDDate == null || eDDate == null) {
            toContinue = false;
            eError.setText("Error. One or more values are unfilled.");
        }
        else if (title.length() > 50 || locn.length() > 50 || descrpn.length() > 100) {
            toContinue = false;
            eError.setText("Error. One or more values contain too many characters.");
        }
        else if (sDDate.after(eDDate)) {
            toContinue = false;
            eError.setText("Error. Start date must come before end date.");
        }
        else {
            toContinue = true;
        }

        if (toContinue) {
            try {
                int min = 1;
                int max = 100;
                Random r = new Random();
                int rand = r.nextInt((max - min) + 1) + min;

                String s = "select * from event where eventno = ?";
                PreparedStatement num = conn.prepareStatement(s);
                num.setString(1, Integer.toString(rand));
                ResultSet rs = num.executeQuery();
                if (rs.next()) {
                    rand = r.nextInt((max - min) + 1) + min;
                    num.setString(1, Integer.toString(rand));
                    rs = num.executeQuery();
                }
                else {
                    String sql = "INSERT INTO Event (UserName, EventNo, EventName, Location, Description, starttime, endtime, StartDate, EndDate)"
                            + "VALUES (?, ?, ?, ?, ?, ?, ?,?,?)";
                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.setString(1, uName);
                    pstmt.setString(2, Integer.toString(rand));
                    pstmt.setString(3, title);
                    pstmt.setString(4, locn);
                    pstmt.setString(5, descrpn);
                    pstmt.setString(6, sTime);
                    pstmt.setString(7, eTime);
                    pstmt.setDate(8, sDate);
                    pstmt.setDate(9, eDate);
                    pstmt.executeUpdate();
                    titleTF.setText("");
                    locTF.setText("");
                    descTF.setText("");

                    createEventStartTime.setValue(defaultDate());
                    createEventEndTime.setValue(defaultDate());
                    eError.setText("");
                    reminderOption1.setVisible(false);
                    goHome();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }

        reminderDialog.setVisible(false);

    }//GEN-LAST:event_cEvntActionPerformed

    private void backFromCreateEvntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromCreateEvntActionPerformed
        if (loggedIn) {
            goHome();
        }
        else {
            goToFront();
        }
    }//GEN-LAST:event_backFromCreateEvntActionPerformed

    private void eEventChange1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eEventChange1ActionPerformed
        String eventName = eEventList.getSelectedItem().toString();
        String thingToEdit = eventOptions.getSelectedItem().toString();
        String change = infoEventTF.getText();

        if (change.isEmpty()) {
            eEventError.setVisible(true);
            eEventError.setText("Cannot edit something that is empty.");
        }
        else {
            try {
                String s = "select * from event where eventname = ?";
                PreparedStatement ps = conn.prepareStatement(s);
                ps.setString(1, eventName);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    String sql = "UPDATE EVENT SET " + thingToEdit + " = ? WHERE EVENTNAME = ?";
                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.setString(1, change);
                    pstmt.setString(2, eventName);
                    pstmt.execute();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
            eEventList();
            goHome();
        }
    }//GEN-LAST:event_eEventChange1ActionPerformed

    private void backFromEditEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromEditEventActionPerformed
        if (loggedIn) {
            goHome();
        }
        else {
            goToFront();
        }
    }//GEN-LAST:event_backFromEditEventActionPerformed

    private void createEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createEventActionPerformed
        if (loggedIn) {
            placeholder.removeAll();
            placeholder.repaint();
            placeholder.revalidate();

            placeholder.add(createEvnt);
            
            sDateChooser.setCalendar(Calendar.getInstance());
            eDateChooser.setCalendar(Calendar.getInstance());

            placeholder.repaint();
            placeholder.revalidate();
        }
        else {
            JDError.setVisible(true);
        }

    }//GEN-LAST:event_createEventActionPerformed


    private void jCalendarHomepageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCalendarHomepageMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jCalendarHomepageMouseClicked

    private void SettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsActionPerformed
        if (loggedIn) {
            placeholder.removeAll();
            placeholder.repaint();
            placeholder.revalidate();

            placeholder.add(settings);
            placeholder.repaint();
            placeholder.revalidate();
        }
        else {
            JDError.setVisible(true);
        }
    }//GEN-LAST:event_SettingsActionPerformed

    private void backFromDeleteEvnt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromDeleteEvnt1ActionPerformed
        if (loggedIn) {
            goHome();
        }
        else {
            goToFront();
        }
    }//GEN-LAST:event_backFromDeleteEvnt1ActionPerformed

    private void goToHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToHelpActionPerformed
        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(help);
        placeholder.repaint();
        placeholder.revalidate();
    }//GEN-LAST:event_goToHelpActionPerformed

    private void JDCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JDCloseActionPerformed
        goToFront();
        JDError.dispose();
    }//GEN-LAST:event_JDCloseActionPerformed

    private void eEventListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_eEventListItemStateChanged
        String item = (String) evt.getItem();

        try {
            String sql;
            sql = "SELECT EventNo, EventName, StartDate, EndDate, Location, description, startTime, endTime, reminderDate, reminderTime "
                    + "FROM Event LEFT OUTER JOIN Reminder ON Event.EVENTNO = Reminder.EVENTNUMBER WHERE eventName = ? AND Event.USERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, item);
            pstmt.setString(2, USERNAME);
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String eventName = rs.getString("eventName");
                String eventStart = rs.getString("startDate");
                String eventEnd = rs.getString("endDate");
                String eventLocation = rs.getString("location");
                String eventDescription = rs.getString("description");
                String sTime = rs.getString("startTime");
                String eTime = rs.getString("endTime");
                
                String rDate = rs.getString("reminderDate");
                String rTime = rs.getString("reminderTime");
                
                eEventName.setText(eventName);
                eEventSDate.setText(eventStart);
                eEventEDate.setText(eventEnd);
                eEventLocation.setText(eventLocation);
                eEventDescription.setText(eventDescription);
                eEventSTime.setText(sTime);
                eEventETime.setText(eTime);
                
                
                if (rDate == null) {
                    jLabel121.setVisible(false);
                    reminderTimeEdit.setVisible(false);
                }
                else {
                    jLabel121.setVisible(true);
                    reminderTimeEdit.setVisible(true);
                    reminderTimeEdit.setText(rDate + " @ " + rTime);
                }
                
                placeholder.repaint();
                placeholder.revalidate();
            }

        } catch (SQLException se) {
            se.printStackTrace();
        }
    }//GEN-LAST:event_eEventListItemStateChanged

    private void eEventListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eEventListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eEventListActionPerformed

    private void JB_EditPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_EditPasswordActionPerformed
        changePasswordPanel.setVisible(true);
    }//GEN-LAST:event_JB_EditPasswordActionPerformed

    private void currentPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentPasswordActionPerformed

    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordActionPerformed
        String current = String.valueOf(currentPassword.getPassword());
        String newP = String.valueOf(newPassword.getPassword());
        String newRetypeP = String.valueOf(newRetypedPassword.getPassword());

        if (current.equals(PASSWORD)) {
            if (newP.equals(newRetypeP)) {
                try {
                    String sql = "UPDATE \"USER\"  SET PASSWORD = ? WHERE Username = ?";
                    PreparedStatement pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, newP);
                    pstmt.setString(2, USERNAME);
                    pstmt.execute();

                    passwordError.setText("Success");
                    PASSWORD = newP;

                } catch (SQLException se) {
                    se.printStackTrace();
                }
            }
            else {
                passwordError.setText("Your new password does not match.");
            }
        }
        else {
            passwordError.setText("Your current password is incorrect.");
        }
    }//GEN-LAST:event_changePasswordActionPerformed

    private void locTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locTFActionPerformed

    private void eventOptionsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_eventOptionsItemStateChanged
        if (evt.getItem() == "EVENTNAME" || evt.getItem() == "LOCATION" || evt.getItem() == "DESCRIPTION"
                || evt.getItem() == "STARTTIME" || evt.getItem() == "ENDTIME") {
            infoEventTF.setVisible(true);
            eEventChange1.setVisible(true);

            eEventDateChooser.setVisible(false);
            eEventChange2.setVisible(false);
            editProxCombo.setVisible(false);
            eEventChange3.setVisible(false);

            eEventError.setVisible(false);

        }
        else if (evt.getItem() == "STARTDATE" || evt.getItem() == "ENDDATE") {
            eEventDateChooser.setVisible(true);
            eEventChange2.setVisible(true);

            infoEventTF.setVisible(false);
            eEventChange1.setVisible(false);
            editProxCombo.setVisible(false);
            eEventChange3.setVisible(false);

            eEventError.setVisible(false);

        }
        else if (evt.getItem() == "REMINDER") {
            editProxCombo.setVisible(true);
            eEventChange3.setVisible(true);
            
            infoEventTF.setVisible(false);
            eEventChange1.setVisible(false);
            eEventDateChooser.setVisible(false);
            eEventChange2.setVisible(false);
            eEventError.setVisible(false);


        }
    }//GEN-LAST:event_eventOptionsItemStateChanged

    private void eEventChange2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eEventChange2ActionPerformed
        String eventName = eEventList.getSelectedItem().toString();
        String thingToEdit = eventOptions.getSelectedItem().toString();
        java.sql.Date change;

        Date eDate = eEventDateChooser.getDate();
        Date preStartDate = new Date(), preEndDate = new Date();

        try {
            String stmt = "select * from event where eventname = ?";
            PreparedStatement ps = conn.prepareStatement(stmt);
            ps.setString(1, eventName);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                preStartDate = rs.getDate("STARTDATE");
                preEndDate = rs.getDate("ENDDATE");
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }

        boolean toContinue = false;

        if (eDate == null) {
            eEventError.setVisible(true);
            eEventError.setText("Cannot edit something that is empty.");

        }
        else if (thingToEdit.equals("STARTDATE")) {
            if (eDate.after(preEndDate)) {
                eEventError.setVisible(true);
                eEventError.setText("Start date needs to occur before end date");
            }
            else {
                toContinue = true;
            }
        }
        else if (thingToEdit.equals("ENDDATE")) {
            if (eDate.before(preStartDate)) {
                eEventError.setVisible(true);
                eEventError.setText("End date needs to occur after start date");
            }
            else {
                toContinue = true;
            }
        }

        if (toContinue) {
            change = new java.sql.Date(eDate.getTime());
            try {
                String s = "select * from event where eventname = ?";
                PreparedStatement ps = conn.prepareStatement(s);
                ps.setString(1, eventName);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    String sql = "UPDATE EVENT SET " + thingToEdit + " = ? WHERE EVENTNAME = ?";
                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.setDate(1, change);
                    pstmt.setString(2, eventName);
                    pstmt.execute();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }

            eEventList();
            goHome();
        }
    }//GEN-LAST:event_eEventChange2ActionPerformed

    private void HomeTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeTabActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HomeTabActionPerformed

    private void AccountTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccountTabActionPerformed
    }//GEN-LAST:event_AccountTabActionPerformed

    private void SignOutTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignOutTabActionPerformed

    }//GEN-LAST:event_SignOutTabActionPerformed

    private void goHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goHomeActionPerformed
        if (loggedIn) {
            goHome();
        }
        else {
            JDError.setVisible(true);
        }
    }//GEN-LAST:event_goHomeActionPerformed

    private void viewAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAccountActionPerformed
        // TODO add your handling code here:
        if (loggedIn) {
            placeholder.removeAll();
            placeholder.repaint();
            placeholder.revalidate();

            placeholder.add(viewAcct);
            changePasswordPanel.setVisible(false);
            placeholder.repaint();
            placeholder.revalidate();
        }
        else {
            JDError.setVisible(true);
        }
    }//GEN-LAST:event_viewAccountActionPerformed

    private void signOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutActionPerformed
        // TODO add your handling code here:
        if (loggedIn) {
            USERNAME = "";
            PASSWORD = "";
            loggedIn = false;
            backToDefault();
            goToFront();
        }
        else {
            JDError.setVisible(true);
        }
    }//GEN-LAST:event_signOutActionPerformed

    private void changeMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeMonthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeMonthActionPerformed

    private void changeDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeDayActionPerformed

    private void changeSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSettingsActionPerformed
        // TODO add your handling code here:
        if (changeDay.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET HPCal = ? WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, "day");
                pstmt.setString(2, USERNAME);
                pstmt.execute();

            } catch (SQLException se) {
                se.printStackTrace();
            }

            changeHPCalDay();
        }
        else if (changeWeek.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET HPCal = ? WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, "week");
                pstmt.setString(2, USERNAME);
                pstmt.execute();

            } catch (SQLException se) {
                se.printStackTrace();
            }
            changeHPCalWeek();
        }
        else if (changeMonth.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET HPCal = ? WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, "month");
                pstmt.setString(2, USERNAME);
                pstmt.execute();

            } catch (SQLException se) {
                se.printStackTrace();
            }
            changeHPCalMonth();
        }
        else if (changeCalendar.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET HPCal = ? WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, "calendar");
                pstmt.setString(2, USERNAME);
                pstmt.execute();

            } catch (SQLException se) {
                se.printStackTrace();
            }
        }

        if (changeCurrentDay.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET CalCoverPage = ? WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, "currentDay");
                pstmt.setString(2, USERNAME);
                pstmt.execute();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        else if (changeFirstAppt.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET CalCoverPage = ? WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, "firstAppt");
                pstmt.setString(2, USERNAME);
                pstmt.execute();

            } catch (SQLException se) {
                se.printStackTrace();
            }
            changeHPCalDay();

        }

    }//GEN-LAST:event_changeSettingsActionPerformed

    private void dayEventChangeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayEventChangeDateActionPerformed
        String day = df.format(dayEventDateChooser.getDate());
        fillDayEventsList(day);

    }//GEN-LAST:event_dayEventChangeDateActionPerformed

    private void viewDayEventInfo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDayEventInfo1ActionPerformed
        try {
            String sql;
            sql = "Select eventName, location, description, starttime, endtime, startdate, enddate FROM Event WHERE eventName = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, dayEventList.getSelectedValue());
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                dayEventStartDate.setText(rs.getString("startDate"));
                dayEventEndDate.setText(rs.getString("endDate"));
                dayEventName.setText(rs.getString("eventName"));
                dayEventDescription.setText(rs.getString("description"));
                dayEventLocation.setText(rs.getString("location"));
                dayEventStartTime.setText(rs.getString("starttime"));
                dayEventEndTime.setText(rs.getString("endtime"));
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }
    }//GEN-LAST:event_viewDayEventInfo1ActionPerformed

    private void jCalendarHomepageDateChanged(org.freixas.jcalendar.DateEvent evt) {//GEN-FIRST:event_jCalendarHomepageDateChanged
        jPanel2.removeAll();
        jPanel2.repaint();
        jPanel2.revalidate();

        jPanel2.add(HPDayView);

        String day = df.format(evt.getSelectedDate().getTime());
        dayEventDate.setText(day);

        DefaultListModel dayDLM = new DefaultListModel();

        try {
            String sql;
            sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate = ? ORDER BY startDate";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, day);
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventName");
                dayDLM.addElement(eventName);
            }
            dayEventList.setModel(dayDLM);
        } catch (SQLException se) {
            se.printStackTrace();
        }

        jPanel2.repaint();
        jPanel2.revalidate();
    }//GEN-LAST:event_jCalendarHomepageDateChanged

    private void viewMonthEventInfo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMonthEventInfo1ActionPerformed
        try {
            String sql;
            sql = "Select eventNo, eventName, startDate, endDate, description,location,starttime,endtime FROM Event WHERE eventName = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, monthEventList1.getSelectedValue());
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                monthEventName1.setText(rs.getString("eventName"));
                monthEventStartDate1.setText(rs.getString("startDate"));
                monthEventEndDate1.setText(rs.getString("endDate"));
                monthEventDescription1.setText(rs.getString("description"));
                monthEventLocation1.setText(rs.getString("location"));
                monthEventStartTime1.setText(rs.getString("starttime"));
                monthEventEndTime1.setText(rs.getString("endtime"));
            }

        } catch (SQLException se) {
            se.printStackTrace();

        }
    }//GEN-LAST:event_viewMonthEventInfo1ActionPerformed

    private void monthEventChangeDate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthEventChangeDate1ActionPerformed
        DefaultListModel monthDLM = new DefaultListModel();

        String month = df.format(monthEventMonthChooser1.getMonth());
        String year = df.format(monthEventYearChooser1.getYear());

        monthEventStartDate1.setText("");
        monthEventEndDate1.setText("");
        monthEventName1.setText("");
        monthEventDescription1.setText("");
        monthEventLocation1.setText("");
        monthEventStartTime1.setText("");
        monthEventEndTime1.setText("");

        Calendar calobj = Calendar.getInstance();

        Calendar startDate = calobj;
        startDate.set(Calendar.DAY_OF_MONTH, 1);
        startDate.set(Calendar.MONTH, monthEventMonthChooser1.getMonth());
        startDate.set(Calendar.YEAR, monthEventYearChooser1.getYear());
        String start = df.format(startDate.getTime());

        int lastDay = calobj.getActualMaximum(Calendar.DAY_OF_MONTH);

        Calendar endDate = calobj;
        endDate.set(Calendar.DAY_OF_MONTH, lastDay);
        endDate.set(Calendar.MONTH, monthEventMonthChooser1.getMonth());
        endDate.set(Calendar.YEAR, monthEventYearChooser1.getYear());
        String end = df.format(endDate.getTime());

        monthEventSDate1.setText(start);
        monthEventEDate1.setText(end);

        try {
            String sql;
            sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate BETWEEN ? AND ? ORDER BY startDate";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, start);
            pstmt.setString(2, end);

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventName");
                monthDLM.addElement(eventName);
            }
            monthEventList1.setModel(monthDLM);

        } catch (SQLException se) {
            se.printStackTrace();

        }
    }//GEN-LAST:event_monthEventChangeDate1ActionPerformed

    private void dayViewCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayViewCalendarActionPerformed
        changeHPCalDay();
    }//GEN-LAST:event_dayViewCalendarActionPerformed

    private void weekViewCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weekViewCalendarActionPerformed
        changeHPCalWeek();
    }//GEN-LAST:event_weekViewCalendarActionPerformed

    private void monthViewCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthViewCalendarActionPerformed
        changeHPCalMonth();
    }//GEN-LAST:event_monthViewCalendarActionPerformed

    private void fullViewCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullViewCalendarActionPerformed
        changeHPCalCalendar();
    }//GEN-LAST:event_fullViewCalendarActionPerformed

    private void changeStartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeStartTimeActionPerformed
        try {

            String startTime = format.format(settingsStartTime.getValue());
            Date d = format.parse(startTime);

            String s = "select officehourend from settings where username = ?";
            PreparedStatement p = conn.prepareStatement(s);
            p.setString(1, USERNAME);
            ResultSet rs = p.executeQuery();

            if (rs.next()) {
                String endTime = rs.getString("officehourend");
                Date d1 = format.parse(endTime);

                if (d.after(d1) || d.equals(d1)) {
                    officeHourError.setText("Error. Start time must precede end time.");
                }
                else {
                    String stmt = "UPDATE Settings SET officehourstart = ? WHERE USERNAME = ?";
                    PreparedStatement pstmt = conn.prepareStatement(stmt);
                    pstmt.setString(1, startTime);
                    pstmt.setString(2, USERNAME);
                    pstmt.execute();
                    officeHourError.setText("");
                    goHome();
                }
            }
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
    }//GEN-LAST:event_changeStartTimeActionPerformed

    private void changeEndTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeEndTimeActionPerformed
        try {
            String endTime = format.format(settingsEndTime.getValue());
            Date d = format.parse(endTime);

            String s = "select officehourstart from settings where username = ?";
            PreparedStatement p = conn.prepareStatement(s);
            p.setString(1, USERNAME);
            ResultSet rs = p.executeQuery();

            if (rs.next()) {
                String startTime = rs.getString("officehourstart");
                Date d1 = format.parse(startTime);

                if (d.before(d1) || d.equals(d1)) {
                    officeHourError.setText("Error. End time must follow start time.");
                }
                else {
                    String stmt = "UPDATE Settings SET officehourend = ? WHERE USERNAME = ?";
                    PreparedStatement pstmt = conn.prepareStatement(stmt);
                    pstmt.setString(1, endTime);
                    pstmt.setString(2, USERNAME);
                    pstmt.execute();
                    officeHourError.setText("");
                    goHome();
                }
            }
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
    }//GEN-LAST:event_changeEndTimeActionPerformed

    private void viewUsersItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewUsersItemActionPerformed
        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(viewUsers);
        placeholder.repaint();
        placeholder.revalidate();
    }//GEN-LAST:event_viewUsersItemActionPerformed

    private void userTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userTypeItemStateChanged
        DefaultTableModel dtm;
        dtm = (DefaultTableModel) viewUserTable.getModel();

        dtm.setRowCount(0);

        String type = userType.getSelectedItem().toString();
        type = type.substring(0, type.length() - 1);

        try {
            String sql;
            PreparedStatement pstmt;
            ResultSet rs;
            if (type.equals("All User")) {
                sql = "SELECT * FROM \"USER\" ORDER BY USERTYPE, LASTNAME, FIRSTNAME";
                pstmt = conn.prepareStatement(sql);
                rs = pstmt.executeQuery();

                while (rs.next()) {
                    String rowData[] = new String[6];
                    rowData[0] = rs.getString("USERTYPE");
                    rowData[1] = rs.getString("USERNAME");
                    rowData[2] = rs.getString("FIRSTNAME");
                    rowData[3] = rs.getString("LASTNAME");
                    rowData[4] = rs.getString("ADDRESS");
                    rowData[5] = rs.getString("PNUM");

                    dtm.addRow(rowData);
                }
            }
            else {
                sql = "SELECT * FROM \"USER\" WHERE USERTYPE = ? ORDER BY LASTNAME, FIRSTNAME";
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, type);
                rs = pstmt.executeQuery();

                while (rs.next()) {
                    String rowData[] = new String[6];
                    rowData[0] = rs.getString("USERTYPE");
                    rowData[1] = rs.getString("USERNAME");
                    rowData[2] = rs.getString("FIRSTNAME");
                    rowData[3] = rs.getString("LASTNAME");
                    rowData[4] = rs.getString("ADDRESS");
                    rowData[5] = rs.getString("PNUM");

                    dtm.addRow(rowData);
                }
            }

        } catch (SQLException se) {
            se.printStackTrace();
        }
        placeholder.repaint();
        placeholder.revalidate();
    }//GEN-LAST:event_userTypeItemStateChanged

    private void viewUserTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewUserTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_viewUserTableMouseClicked

    private void viewUserTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewUserTableMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3 && viewUserTable.getSelectedRow() != -1) {
            viewUsersPopupMenu.show(viewUserTable, evt.getX(), evt.getY());
            int row = viewUserTable.getSelectedRow();
            int column = 1;
            String name = (String) viewUserTable.getValueAt(row, column);

            usernameEvent.setText(name);
        }
    }//GEN-LAST:event_viewUserTableMouseReleased

    private void pMenuCreateEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pMenuCreateEventActionPerformed

        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(createEvntEmp);
        reminderDialog1.setVisible(false);
        placeholder.repaint();
        placeholder.revalidate();
    }//GEN-LAST:event_pMenuCreateEventActionPerformed

    private void cEvntEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cEvntEmpActionPerformed
        boolean toContinue = false;

        String uName = usernameEvent.getText();
        String title = titleTF1.getText();
        String sTime = format.format(createEventEmpStartTime.getValue());
        String eTime = format.format(createEventEmpEndTime.getValue());
        String locn = locTF1.getText();
        String descrpn = descTF1.getText();
        Date sDDate = sDateChooser1.getDate();
        Date eDDate = eDateChooser1.getDate();

        java.sql.Date sDate = new java.sql.Date(sDDate.getTime());
        java.sql.Date eDate = new java.sql.Date(sDDate.getTime());

        if (title.isEmpty() || locn.isEmpty() || descrpn.isEmpty() || sTime.isEmpty() || eTime.isEmpty() || sDDate == null || eDDate == null) {
            toContinue = false;
            eError1.setText("Error. One or more values are unfilled.");
        }
        else if (title.length() > 50 || locn.length() > 50 || descrpn.length() > 100) {
            toContinue = false;
            eError1.setText("Error. One or more values contain too many characters.");
        }
        else if (sDDate.after(eDDate)) {
            toContinue = false;
            eError1.setText("Error. Start date must come before end date.");
        }
        else {
            toContinue = true;
        }

        if (toContinue) {
            try {
                int min = 1;
                int max = 100;
                Random r = new Random();
                int rand = r.nextInt((max - min) + 1) + min;

                String s = "select * from event where eventno = ?";
                PreparedStatement num = conn.prepareStatement(s);
                num.setString(1, Integer.toString(rand));
                ResultSet rs = num.executeQuery();
                if (rs.next()) {
                    rand = r.nextInt((max - min) + 1) + min;
                    num.setString(1, Integer.toString(rand));
                    rs = num.executeQuery();
                }
                else {
                    String sql = "INSERT INTO Event (UserName, EventNo, EventName, Location, Description, starttime, endtime, StartDate, EndDate)"
                            + "VALUES (?, ?, ?, ?, ?, ?, ?,?,?)";
                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.setString(1, uName);
                    pstmt.setString(2, Integer.toString(rand));
                    pstmt.setString(3, title);
                    pstmt.setString(4, locn);
                    pstmt.setString(5, descrpn);
                    pstmt.setString(6, sTime);
                    pstmt.setString(7, eTime);
                    pstmt.setDate(8, sDate);
                    pstmt.setDate(9, eDate);
                    pstmt.executeUpdate();
                    titleTF1.setText("");
                    locTF1.setText("");
                    descTF1.setText("");

                    createEventEmpStartTime.setValue(defaultDate());
                    createEventEmpEndTime.setValue(defaultDate());
                    reminderOption.setVisible(false);
                    goHome();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }//GEN-LAST:event_cEvntEmpActionPerformed

    private void locTF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locTF1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locTF1ActionPerformed

    private void backFromCreateEvnt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromCreateEvnt1ActionPerformed
        goUserView();
    }//GEN-LAST:event_backFromCreateEvnt1ActionPerformed

    private void changeColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeColorActionPerformed
        if (changeRed.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET backgroundColor = 'red' WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, USERNAME);
                pstmt.execute();
            } catch (SQLException se) {
                se.printStackTrace();
            }
            changeColorRed();
        }
        else if (changeBlue.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET backgroundColor = 'blue' WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, USERNAME);
                pstmt.execute();
            } catch (SQLException se) {
                se.printStackTrace();
            }
            changeColorBlue();
        }
        else if (changeGreen.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET backgroundColor = 'green' WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, USERNAME);
                pstmt.execute();
            } catch (SQLException se) {
                se.printStackTrace();
            }
            changeColorGreen();
        }
        else if (changeDefault.isSelected()) {
            try {
                String stmt = "UPDATE Settings SET backgroundColor = 'default' WHERE USERNAME = ?";
                PreparedStatement pstmt = conn.prepareStatement(stmt);
                pstmt.setString(1, USERNAME);
                pstmt.execute();
            } catch (SQLException se) {
                se.printStackTrace();
            }
            changeColorDefault();
        }

    }//GEN-LAST:event_changeColorActionPerformed

    private void createUserAcctEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserAcctEmpActionPerformed
        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(CreateAcct);
        JBGoBack.setVisible(false);
        placeholder.repaint();
        placeholder.revalidate();
    }//GEN-LAST:event_createUserAcctEmpActionPerformed

    private void eventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventButtonActionPerformed
        reminderDialog1.setVisible(true);
        reminderOption.setVisible(true);

        proximity.setVisible(false);
        proxCombo.setVisible(false);
        eventWithReminder.setVisible(false);
    }//GEN-LAST:event_eventButtonActionPerformed

    private void eventWithReminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventWithReminderActionPerformed
        boolean toContinue = false;

        String uName = usernameEvent.getText();
        String title = titleTF1.getText();
        String sTime = format.format(createEventEmpStartTime.getValue());
        String eTime = format.format(createEventEmpEndTime.getValue());
        String locn = locTF1.getText();
        int reminder = proxCombo.getSelectedIndex();
        String descrpn = descTF1.getText();
        Date sDDate = sDateChooser1.getDate();
        Date eDDate = eDateChooser1.getDate();

        java.sql.Date sDate = new java.sql.Date(sDDate.getTime());
        java.sql.Date eDate = new java.sql.Date(sDDate.getTime());

        Date remDate = sDDate, remTime = sDDate;
        Calendar c = getCalFromRemIndex (reminder, sDDate, sTime);
        remDate = c.getTime();
        remTime = c.getTime();
        
        java.sql.Date rDate = new java.sql.Date(remDate.getTime());
        
        String reminderTime = format.format(remTime);

        if (title.isEmpty() || locn.isEmpty() || descrpn.isEmpty() || sTime.isEmpty()
                || eTime.isEmpty() || sDDate == null || eDDate == null) {
            toContinue = false;
            eError1.setText("Error. One or more values are unfilled.");
        }
        else if (title.length() > 50 || locn.length() > 50 || descrpn.length() > 100) {
            toContinue = false;
            eError1.setText("Error. One or more values contain too many characters.");
        }
        else if (sDDate.after(eDDate)) {
            toContinue = false;
            eError1.setText("Error. Start date must come before end date.");
        }
        else {
            toContinue = true;
        }

        if (toContinue) {
            try {
                int min = 1;
                int max = 100;
                Random r = new Random();
                int rand = r.nextInt((max - min) + 1) + min;

                String s = "select * from event where eventno = ?";
                PreparedStatement num = conn.prepareStatement(s);
                num.setString(1, Integer.toString(rand));
                ResultSet rs = num.executeQuery();
                if (rs.next()) {
                    rand = r.nextInt((max - min) + 1) + min;
                    num.setString(1, Integer.toString(rand));
                    rs = num.executeQuery();
                }
                else {
                    String sql = "INSERT INTO Event (UserName, EventNo, EventName, Location, Description, starttime, endtime, StartDate, EndDate)"
                            + "VALUES (?, ?, ?, ?, ?, ?, ?,?,?)";
                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.setString(1, uName);
                    pstmt.setString(2, Integer.toString(rand));
                    pstmt.setString(3, title);
                    pstmt.setString(4, locn);
                    pstmt.setString(5, descrpn);
                    pstmt.setString(6, sTime);
                    pstmt.setString(7, eTime);
                    pstmt.setDate(8, sDate);
                    pstmt.setDate(9, eDate);
                    pstmt.executeUpdate();
                    titleTF1.setText("");
                    locTF1.setText("");
                    descTF1.setText("");

                    createEventEmpStartTime.setValue(defaultDate());
                    createEventEmpEndTime.setValue(defaultDate());
                    reminderOption.setVisible(false);
                }

                String evNum = "select eventno from event where eventname = ?";
                PreparedStatement prep = conn.prepareStatement(evNum);
                prep.setString(1, title);
                ResultSet res = prep.executeQuery();

                if (res.next()) {
                    String number = res.getString("eventno");
                    String str = "select * from reminder where username = ? and eventnumber = ? and reminderdate = ?";
                    PreparedStatement ps = conn.prepareStatement(str);
                    ps.setString(1, uName);
                    ps.setString(2, number);
                    ps.setDate(3, rDate);
                    ResultSet rset = ps.executeQuery();

                    if (rset.next()) {
                        evtRemEmpError.setText("Error. Reminder already exists.");
                        uName = usernameEvent.getText();
                        remDate = sDDate;
                        rDate = new java.sql.Date(remDate.getTime());
                        ps.setString(1, uName);
                        ps.setString(2, number);
                        ps.setDate(3, rDate);
                        rs = ps.executeQuery();
                    }
                    else {
                        String sql = "INSERT INTO REMINDER VALUES (?,?,?,?)";
                        PreparedStatement pstmt = conn.prepareStatement(sql);

                        pstmt.setString(1, uName);
                        pstmt.setString(2, number);
                        pstmt.setDate(3, rDate);
                        pstmt.setString(4, reminderTime);
                        pstmt.execute();
                        evtRemEmpError.setText("");
                        goHome();
                    }
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        reminderDialog1.setVisible(false);
    }//GEN-LAST:event_eventWithReminderActionPerformed

    private void cRemValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cRemValActionPerformed
        proximity.setVisible(true);
        proxCombo.setVisible(true);
        eventWithReminder.setVisible(true);
    }//GEN-LAST:event_cRemValActionPerformed

    private void eventWithReminder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventWithReminder1ActionPerformed
        boolean toContinue = false;

        String title = titleTF.getText();
        String sTime = format.format(createEventStartTime.getValue());
        String eTime = format.format(createEventEndTime.getValue());
        String locn = locTF.getText();
        int reminder = proxCombo1.getSelectedIndex();
        String descrpn = descTF.getText();
        Date sDDate = sDateChooser.getDate();
        Date eDDate = eDateChooser.getDate();

        java.sql.Date sDate = new java.sql.Date(sDDate.getTime());
        java.sql.Date eDate = new java.sql.Date(sDDate.getTime());

        Date remDate = sDDate, remTime = sDDate;
        Calendar c = getCalFromRemIndex (reminder, sDDate, sTime);
        remDate = c.getTime();
        remTime = c.getTime();
        
        java.sql.Date rDate = new java.sql.Date(remDate.getTime());
        String rTime = format.format(remTime);

        if (title.isEmpty() || locn.isEmpty() || descrpn.isEmpty() || sTime.isEmpty()
                || eTime.isEmpty() || sDDate == null || eDDate == null) {
            toContinue = false;
            eError.setText("Error. One or more values are unfilled.");
        }
        else if (title.length() > 50 || locn.length() > 50 || descrpn.length() > 100) {
            toContinue = false;
            eError.setText("Error. One or more values contain too many characters.");
        }
        else if (sDDate.after(eDDate)) {
            toContinue = false;
            eError.setText("Error. Start date must come before end date.");
        }
        else {
            toContinue = true;
        }

        if (toContinue) {
            try {
                int min = 1;
                int max = 100;
                Random r = new Random();
                int rand = r.nextInt((max - min) + 1) + min;

                String s = "select * from event where eventno = ?";
                PreparedStatement num = conn.prepareStatement(s);
                num.setString(1, Integer.toString(rand));
                ResultSet rs = num.executeQuery();
                if (rs.next()) {
                    rand = r.nextInt((max - min) + 1) + min;
                    num.setString(1, Integer.toString(rand));
                    rs = num.executeQuery();
                }
                else {
                    String sql = "INSERT INTO Event "
                            + "VALUES (?, ?, ?, ?, ?, ?, ?,?,?)";
                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.setString(1, USERNAME);
                    pstmt.setString(2, Integer.toString(rand));
                    pstmt.setString(3, title);
                    pstmt.setString(4, locn);
                    pstmt.setString(5, descrpn);
                    pstmt.setString(6, sTime);
                    pstmt.setString(7, eTime);
                    pstmt.setDate(8, sDate);
                    pstmt.setDate(9, eDate);
                    pstmt.executeUpdate();
                    titleTF.setText("");
                    locTF.setText("");
                    descTF.setText("");

                    createEventStartTime.setValue(defaultDate());
                    createEventEndTime.setValue(defaultDate());
                    reminderOption1.setVisible(false);
                }

                String evNum = "select eventno from event where eventname = ? AND USERNAME = ?";
                PreparedStatement prep = conn.prepareStatement(evNum);
                prep.setString(1, title);
                prep.setString(2, USERNAME);
                ResultSet res = prep.executeQuery();

                if (res.next()) {
                    String number = res.getString("eventno");
                    String str = "select * from reminder where username = ? and eventnumber = ? and reminderdate = ?";
                    PreparedStatement ps = conn.prepareStatement(str);
                    ps.setString(1, USERNAME);
                    ps.setString(2, number);
                    ps.setDate(3, rDate);
                    ResultSet rset = ps.executeQuery();

                    if (rset.next()) {
                        evtRemEmpError1.setText("Error. Reminder already exists.");
                        remDate = sDDate;
                        rDate = new java.sql.Date(remDate.getTime());
                        ps.setString(1, USERNAME);
                        ps.setString(2, number);
                        ps.setDate(3, rDate);
                        rs = ps.executeQuery();
                    }
                    else {
                        String sql = "INSERT INTO REMINDER VALUES (?,?,?,?)";
                        PreparedStatement pstmt = conn.prepareStatement(sql);

                        pstmt.setString(1, USERNAME);
                        pstmt.setString(2, number);
                        pstmt.setDate(3, rDate);
                        pstmt.setString(4, rTime);
                        pstmt.execute();
                        evtRemEmpError1.setText("");
                        goHome();
                    }
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }

        reminderDialog.setVisible(false);

    }//GEN-LAST:event_eventWithReminder1ActionPerformed

    private void cRemVal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cRemVal1ActionPerformed
        proximity1.setVisible(true);
        proxCombo1.setVisible(true);
        eventWithReminder1.setVisible(true);
    }//GEN-LAST:event_cRemVal1ActionPerformed

    private void evButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evButtonActionPerformed
        reminderDialog.setVisible(true);
        reminderOption1.setVisible(true);
 
       proximity1.setVisible(false);
        proxCombo1.setVisible(false);
        eventWithReminder1.setVisible(false);
    }//GEN-LAST:event_evButtonActionPerformed

    private void viewWeekEventInfo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewWeekEventInfo1ActionPerformed
        try {
            String sql;
            sql = "Select eventName, startDate, endDate, description,location,starttime,endtime FROM Event WHERE eventName = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, weekEventList1.getSelectedValue());
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                weekEventName1.setText(rs.getString("eventName"));
                weekEventStartDate1.setText(rs.getString("startDate"));
                weekEventEndDate1.setText(rs.getString("endDate"));
                weekEventDescription1.setText(rs.getString("description"));
                weekEventLocation1.setText(rs.getString("location"));
                weekEventStartTime1.setText(rs.getString("starttime"));
                weekEventEndTime1.setText(rs.getString("endtime"));
            }
        } catch (SQLException se) {
            se.printStackTrace();

        }
    }//GEN-LAST:event_viewWeekEventInfo1ActionPerformed

    private void weekEventChangeDate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weekEventChangeDate1ActionPerformed
        DefaultListModel weekDLM = new DefaultListModel();

        String day = df.format(weekEventDateChooser1.getDate());
        weekEventStartDate1.setText("");
        weekEventEndDate1.setText("");
        weekEventName1.setText("");
        weekEventDescription1.setText("");
        weekEventStartTime1.setText("");
        weekEventEndTime1.setText("");
        weekEventLocation1.setText("");

        Calendar calobj = weekEventDateChooser1.getCalendar();

        Calendar startDate = weekEventDateChooser1.getCalendar();
        startDate.add(Calendar.DAY_OF_YEAR, -calobj.get(Calendar.DAY_OF_WEEK));
        String start = df.format(startDate.getTime());

        int difference = 7 - calobj.get(Calendar.DAY_OF_WEEK);

        Calendar endDate = weekEventDateChooser1.getCalendar();
        endDate.add(Calendar.DAY_OF_YEAR, difference);
        String end = df.format(endDate.getTime());

        weekEventSDate1.setText(start);
        weekEventEDate1.setText(end);

        try {
            String sql;
            sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate BETWEEN ? AND ? ORDER BY startDate";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, start);
            pstmt.setString(2, end);

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventName");
                weekDLM.addElement(eventName);
            }
            weekEventList1.setModel(weekDLM);
        } catch (SQLException se) {
            se.printStackTrace();

        }
    }//GEN-LAST:event_weekEventChangeDate1ActionPerformed

    private void reminderSettingChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reminderSettingChangeActionPerformed
        String contact = getReminderSetting();
        try {
            String sql = "UPDATE Settings SET Contact = ? WHERE USERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, contact);
            pstmt.setString(2, USERNAME);
            
            pstmt.execute();
            
        } catch (SQLException se) {
            se.printStackTrace();
        }
    }//GEN-LAST:event_reminderSettingChangeActionPerformed

    private void proxCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxCombo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proxCombo1ActionPerformed

    private void editProxComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProxComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editProxComboActionPerformed

    private void eEventChange3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eEventChange3ActionPerformed
        String edit = (String) eEventList.getSelectedItem();
        
        try {
            String sql = "SELECT EventNo, startDate, startTime, reminderDate FROM Event "
                    + "LEFT OUTER JOIN Reminder "
                    + "on Event.EventNo = Reminder.EventNumber "
                    + " WHERE EventName = ? AND Event.USERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, edit);
            pstmt.setString(2, USERNAME);
            
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                int eventNo = rs.getInt("EventNo");
                Date sDate = rs.getDate("startDate");
                String sTime = rs.getString("startTime");
                String reminderDate = rs.getString("reminderDate");
                
                int reminder = editProxCombo.getSelectedIndex();
                Calendar c = getCalFromRemIndex(reminder, sDate, sTime);

                String date = df.format(c.getTime());
                String newRTime = format.format(c.getTime());
               
                if (reminderDate != null) {
                    sql = "UPDATE Reminder SET reminderDate = ?, reminderTime = ? WHERE eventNumber = ? AND USERNAME = ?";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setDate(1, java.sql.Date.valueOf(date));
                    pstmt.setString(2, newRTime);
                    pstmt.setInt(3, eventNo);
                    pstmt.setString(4, USERNAME);

                    pstmt.execute();
                }
                else {
                    sql = "INSERT INTO Reminder VALUES (?,?,?,?)";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, USERNAME);
                    pstmt.setInt(2, eventNo);
                    pstmt.setDate(3, java.sql.Date.valueOf(date));
                    pstmt.setString(4, newRTime);
                    
                    pstmt.execute();
                }
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }
        eEventList();
    }//GEN-LAST:event_eEventChange3ActionPerformed

    private void backFromConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromConfirmActionPerformed
        optionDelete.setVisible(false);
    }//GEN-LAST:event_backFromConfirmActionPerformed

    private void dEvntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dEvntActionPerformed
        String remove = (String) dEventList.getSelectedItem();

        try {
            String s = "select * from event where eventname = ? AND USERNAME = ?";
            PreparedStatement ps = conn.prepareStatement(s);
            ps.setString(1, remove);
            ps.setString(2, USERNAME);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String sql = "DELETE FROM Event WHERE EventName = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, remove);
                pstmt.execute();

            }
            else {
                ps.setString(1, remove);
                rs = ps.executeQuery();
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }

        dEventList();

        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(deleteEvnt);
        placeholder.repaint();
        placeholder.revalidate();

        dEventList();
        goHome();
    }//GEN-LAST:event_dEvntActionPerformed

    private void deleteChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteChoiceActionPerformed
        optionDelete.setVisible(true);
    }//GEN-LAST:event_deleteChoiceActionPerformed

    private void backFromDeleteEvntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromDeleteEvntActionPerformed
        if (loggedIn) {
            goHome();
        }
        else {
            goToFront();
        }
    }//GEN-LAST:event_backFromDeleteEvntActionPerformed

    private void dEventListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dEventListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dEventListActionPerformed

    private void dEventListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dEventListItemStateChanged
        String item = (String) evt.getItem();

        try {
            String sql;
            sql = "SELECT * FROM Event WHERE eventname = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, item);
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String eventName = rs.getString("eventName");
                String eventStart = rs.getString("startDate");
                String eventEnd = rs.getString("endDate");
                String eventLocation = rs.getString("location");
                String eventDescription = rs.getString("description");
                String sTime = rs.getString("starttime");
                String eTime = rs.getString("endtime");

                dEventName.setText(eventName);
                dEventSDate.setText(eventStart);
                dEventEDate.setText(eventEnd);
                dEventLocation.setText(eventLocation);
                dEventDescription.setText(eventDescription);
                dEventSTime.setText(sTime);
                dEventETime.setText(eTime);

                placeholder.repaint();
                placeholder.revalidate();
            }

        } catch (SQLException se) {
            se.printStackTrace();
        }
    }//GEN-LAST:event_dEventListItemStateChanged

    private void goHome() {
        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(Homepage);
        placeholder.repaint();
        placeholder.revalidate();
    }

    private void goToFront() {
        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(openApp);
        JTUsername1.setText("");
        JPWPass.setText("");
        jMenuBar1.setVisible(false);
        placeholder.repaint();
        placeholder.revalidate();
    }

    private void goUserView() {
        placeholder.removeAll();
        placeholder.repaint();
        placeholder.revalidate();

        placeholder.add(viewUsers);
        placeholder.repaint();
        placeholder.revalidate();
    }

    public String getCurrentDay() {
        Calendar calobj = Calendar.getInstance();
        return df.format(calobj.getTime());
    }

    private Date getFirstAppt() {
        Calendar firstAppt = Calendar.getInstance();
        Calendar range = Calendar.getInstance();
        range.add(Calendar.DATE, 32);
        Date currDay = range.getTime();
        boolean first = false;

        try {
            do {
                String sql = "Select startDate FROM Event WHERE startDate = ? and username = ? ORDER BY startTime";
                PreparedStatement pstmt = conn.prepareStatement(sql);

                String date = df.format(firstAppt.getTime());

                pstmt.setDate(1, java.sql.Date.valueOf(date));
                pstmt.setString(2, USERNAME);
                ResultSet rs = pstmt.executeQuery();

                if (rs.next()) {
                    first = true;
                }
                else if (firstAppt.after(range)) {
                    currDay = null;
                    first = true;
                }
                else {
                    firstAppt.add(Calendar.DATE, 1);
                }
            } while (!first);
        } catch (SQLException se) {
            se.printStackTrace();
        }

        return currDay;
    }

    private void fillDayEventsList(String day) {
        DefaultListModel dayDLM = new DefaultListModel();
        dayEventDate.setText(day);
        try {
            String sql;
            sql = "Select eventName, startDate FROM Event WHERE startDate = ? and username = ? ORDER BY startDate";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, day);
            pstmt.setString(2, USERNAME);
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventName");
                dayDLM.addElement(eventName);
            }
            dayEventList.setModel(dayDLM);

        } catch (SQLException se) {
            se.printStackTrace();
        }

    }

    private void fillDayEventsList_firstAppt() {
        Date firstAppt = getFirstAppt();
        Calendar crrntDay = Calendar.getInstance();

        if (firstAppt != null && firstAppt.equals(crrntDay)) {
            DefaultListModel dayDLM = new DefaultListModel();
            dayEventDate.setText(currentDay);

            try {
                String sql;
                sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate = ? and username = ? ORDER BY startDate";
                PreparedStatement pstmt = conn.prepareStatement(sql);

                pstmt.setString(1, currentDay);
                pstmt.setString(2, USERNAME);
                pstmt.execute();

                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    String eventName = rs.getString("eventName");
                    dayDLM.addElement(eventName);
                }

                dayEventList.setModel(dayDLM);

            } catch (SQLException se) {
                se.printStackTrace();

            }
        }

    }

    private void fillWeekEventsList_firstAppt() {
        Date firstAppt = getFirstAppt();

        DefaultListModel weekDLM = new DefaultListModel();

        Calendar calobj = Calendar.getInstance();

        Calendar startDate = Calendar.getInstance();
        startDate.add(Calendar.DATE, -calobj.get(Calendar.DATE));
        String start = df.format(startDate.getTime());

        int difference = 7 - calobj.get(Calendar.DAY_OF_WEEK);

        Calendar endDate = Calendar.getInstance();
        endDate.add(Calendar.DAY_OF_YEAR, difference);
        String end = df.format(endDate.getTime());

        if (firstAppt != null && firstAppt.before(endDate.getTime())) {
            weekEventSDate1.setText(start);
            weekEventEDate1.setText(end);

            try {
                String sql;
                sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate = ? and username = ? ORDER BY startDate";
                PreparedStatement pstmt = conn.prepareStatement(sql);

                pstmt.setDate(1, new java.sql.Date(firstAppt.getTime()));
                pstmt.setString(2, USERNAME);
                pstmt.execute();

                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    String eventName = rs.getString("eventName");
                    weekDLM.addElement(eventName);
                }

                weekEventList1.setModel(weekDLM);
                weekEventList1.repaint();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        else {
            jPanel2.removeAll();
            jPanel2.repaint();
            jPanel2.revalidate();

            jPanel2.add(noAppt);
            jPanel2.repaint();
            jPanel2.revalidate();
        }

    }

    private void fillWeekEventsList() {
        DefaultListModel weekDLM = new DefaultListModel();

        Calendar calobj = Calendar.getInstance();

        Calendar startDate = Calendar.getInstance();
        startDate.add(Calendar.DAY_OF_YEAR, -calobj.get(Calendar.DAY_OF_WEEK));
        String start = df.format(startDate.getTime());

        int difference = 7 - calobj.get(Calendar.DAY_OF_WEEK);

        Calendar endDate = Calendar.getInstance();
        endDate.add(Calendar.DAY_OF_YEAR, difference);
        String end = df.format(endDate.getTime());

        weekEventSDate1.setText(start);
        weekEventEDate1.setText(end);
        try {
            String sql;
            sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate BETWEEN ? AND ? and username = ? ORDER BY startDate";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, start);
            pstmt.setString(2, end);
            pstmt.setString(3, USERNAME);
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventName");
                weekDLM.addElement(eventName);
            }
            if (!rs.next()) {
                jPanel2.removeAll();
                jPanel2.repaint();
                jPanel2.revalidate();

                jPanel2.add(noAppt);
                jPanel2.repaint();
                jPanel2.revalidate();
            }
            weekEventList1.setModel(weekDLM);
            weekEventList1.repaint();

        } catch (SQLException se) {
            se.printStackTrace();

        }
    }

    private void fillMonthEventsList_firstAppt() {
        Date firstAppt = getFirstAppt();

        DefaultListModel monthDLM = new DefaultListModel();
        Calendar calobj = Calendar.getInstance();

        Calendar startDate = Calendar.getInstance();
        startDate.add(Calendar.DAY_OF_YEAR, -calobj.get(Calendar.DAY_OF_MONTH) + 1);
        String start = df.format(startDate.getTime());

        int difference = calobj.getActualMaximum(Calendar.DAY_OF_MONTH);

        Calendar endDate = Calendar.getInstance();
        endDate.set(Calendar.DATE, difference);
        String end = df.format(endDate.getTime());

        if (firstAppt != null && firstAppt.before(endDate.getTime())) {
            monthEventSDate1.setText(start);
            monthEventEDate1.setText(end);

            try {
                String sql;
                sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate BETWEEN ? AND ? and username = ? ORDER BY startDate";
                PreparedStatement pstmt = conn.prepareStatement(sql);

                pstmt.setString(1, start);
                pstmt.setString(2, end);
                pstmt.setString(3, USERNAME);
                pstmt.execute();

                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    String eventName = rs.getString("eventName");
                    monthDLM.addElement(eventName);
                }
                monthEventList1.setModel(monthDLM);

            } catch (SQLException se) {
                se.printStackTrace();

            }
        }
        else {
            jPanel2.removeAll();
            jPanel2.repaint();
            jPanel2.revalidate();

            jPanel2.add(noAppt);
            jPanel2.repaint();
            jPanel2.revalidate();
        }

    }

    private void fillMonthEventsList() {

        DefaultListModel monthDLM = new DefaultListModel();
        Calendar calobj = Calendar.getInstance();

        Calendar startDate = Calendar.getInstance();
        startDate.add(Calendar.DAY_OF_YEAR, -calobj.get(Calendar.DAY_OF_MONTH) + 1);
        String start = df.format(startDate.getTime());

        int difference = calobj.getActualMaximum(Calendar.DAY_OF_MONTH);

        Calendar endDate = Calendar.getInstance();
        endDate.set(Calendar.DATE, difference);
        String end = df.format(endDate.getTime());

        monthEventSDate1.setText(start);
        monthEventEDate1.setText(end);

        try {
            String sql;
            sql = "Select eventNo, eventName, startDate FROM Event WHERE startDate BETWEEN ? AND ? and username = ? ORDER BY startDate";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, start);
            pstmt.setString(2, end);
            pstmt.setString(3, USERNAME);
            pstmt.execute();

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventName");
                monthDLM.addElement(eventName);
            }
            if (!rs.next()) {
                jPanel2.removeAll();
                jPanel2.repaint();
                jPanel2.revalidate();

                jPanel2.add(noAppt);
                jPanel2.repaint();
                jPanel2.revalidate();
            }
            monthEventList1.setModel(monthDLM);

        } catch (SQLException se) {
            se.printStackTrace();

        }
    }

    private void dEventList() {
        dEventList.removeAllItems();

        try {
            String s = "select eventname from Event WHERE USERNAME = ?";
            PreparedStatement ps = conn.prepareStatement(s);
            ps.setString(1, USERNAME);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventname");
                dEventList.addItem(eventName);
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }
    }

    private void eEventList() {
        eEventList.removeAllItems();

        try {
            String s = "select distinct eventname from Event WHERE USERNAME = ? AND startDate >= ?";
            PreparedStatement ps = conn.prepareStatement(s);
            
            ps.setString(1, USERNAME);
            ps.setString(2, currentDay);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String eventName = rs.getString("eventname");
                eEventList.addItem(eventName);
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }
    }

    
    private void settings() {
        try {
            String stmt = "SELECT * FROM SETTINGS WHERE USERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(stmt);
            pstmt.setString(1, USERNAME);
            ResultSet rs = pstmt.executeQuery();

            String homePageCal = "", calCoverPage = "", backgroundColor = "", startTime = "", endTime = "", contact = "";
            while (rs.next()) {
                homePageCal = rs.getString("HPCAL");
                calCoverPage = rs.getString("CALCOVERPAGE");
                backgroundColor = rs.getString("BACKGROUNDCOLOR");
                startTime = rs.getString("OFFICEHOURSTART");
                endTime = rs.getString("OFFICEHOUREND");
                contact = rs.getString("CONTACT");
                hasAccess = rs.getBoolean("hasAccess");
                
            }

            if (backgroundColor.equals("red")) {
                changeRed.doClick();
                changeColorRed();
            }
            else if (backgroundColor.equals("blue")) {
                changeBlue.doClick();
                changeColorBlue();
            }
            else if (backgroundColor.equals("green")) {
                changeGreen.doClick();
                changeColorGreen();
            }
            else {
                changeDefault.doClick();
                changeColorDefault();
            }

            if (homePageCal.equals("day")) {
                changeDay.doClick();
                changeHPCalDay();
                
            }
            else if (homePageCal.equals("week")) {
                changeWeek.doClick();
                changeHPCalWeek();
            }
            else if (homePageCal.equals("month")) {
                changeMonth.doClick();
                changeHPCalMonth();
            }
            else if (homePageCal.equals("calendar")) {
                changeCalendar.doClick();
                changeHPCalCalendar();
            }

            if (calCoverPage.equals("currentDay")) {
                changeCurrentDay.doClick();
            }
            else if (calCoverPage.equals("firstAppt")) {
                changeFirstAppt.doClick();
            }

            try {
                settingsStartTime.setValue(format.parseObject(startTime));
                settingsEndTime.setValue(format.parseObject(endTime));
            } catch (ParseException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if (contact.equals("text")) {
                reminderSetting.setSelectedIndex(0);
            }
            else if (contact.equals("email")) {
                reminderSetting.setSelectedIndex(1);
            }

        } catch (SQLException se) {
            se.printStackTrace();
        }
    }

    private void changeColorRed() {
        background0.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background1.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background2.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background3.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background4.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background5.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background6.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background13.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background14.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background15.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));
        background16.setIcon(new javax.swing.ImageIcon("src/uptodate/RedBackground.png"));

        placeholder.repaint();
        placeholder.revalidate();
    }

    private void changeColorBlue() {
        background0.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background1.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background2.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background3.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background4.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background5.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background6.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background13.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background14.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background15.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));
        background16.setIcon(new javax.swing.ImageIcon("src/uptodate/BlueBackground.png"));

        placeholder.repaint();
        placeholder.revalidate();
    }

    private void changeColorGreen() {
        background0.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background1.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background2.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background3.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background4.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background5.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background6.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background13.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background14.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background15.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));
        background16.setIcon(new javax.swing.ImageIcon("src/uptodate/GreenBackground.jpg"));

        placeholder.repaint();
        placeholder.revalidate();
    }

    private void changeColorDefault() {
        background0.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background1.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background2.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background3.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background4.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background5.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background6.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background13.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background14.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background15.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background16.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));

        placeholder.repaint();
        placeholder.revalidate();
    }

    private void changeHPCalDay() {
        try {
            String stmt = "SELECT CALCOVERPAGE FROM SETTINGS WHERE USERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(stmt);
            pstmt.setString(1, USERNAME);
            ResultSet rs = pstmt.executeQuery();

            String calCoverPage = "";
            if (rs.next()) {
                calCoverPage = rs.getString("CALCOVERPAGE");
            }

            if (calCoverPage.equals("currentDay")) {
                fillDayEventsList(currentDay);
            }
            else if (calCoverPage.equals("firstAppt")) {
                fillDayEventsList_firstAppt();
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }

        jPanel2.removeAll();
        jPanel2.repaint();
        jPanel2.revalidate();

        jPanel2.add(HPDayView);
        jPanel2.repaint();
        jPanel2.revalidate();

    }

    private void changeHPCalWeek() {
        try {
            String stmt = "SELECT CALCOVERPAGE FROM SETTINGS WHERE USERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(stmt);
            pstmt.setString(1, USERNAME);
            ResultSet rs = pstmt.executeQuery();

            String calCoverPage = "";
            if (rs.next()) {
                calCoverPage = rs.getString("CALCOVERPAGE");
            }

            if (calCoverPage.equals("currentDay")) {
                fillWeekEventsList();
            }
            else if (calCoverPage.equals("firstAppt")) {
                fillWeekEventsList_firstAppt();
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }

        jPanel2.removeAll();
        jPanel2.repaint();
        jPanel2.revalidate();

        jPanel2.add(HPWeekView);
        jPanel2.repaint();
        jPanel2.revalidate();
    }

    private void changeHPCalMonth() {

        try {
            String stmt = "SELECT CALCOVERPAGE FROM SETTINGS WHERE USERNAME = ?";
            PreparedStatement pstmt = conn.prepareStatement(stmt);
            pstmt.setString(1, USERNAME);
            ResultSet rs = pstmt.executeQuery();

            String calCoverPage = "";
            if (rs.next()) {
                calCoverPage = rs.getString("CALCOVERPAGE");
            }

            if (calCoverPage.equals("currentDay")) {
                fillMonthEventsList();
            }
            else if (calCoverPage.equals("firstAppt")) {
                fillMonthEventsList_firstAppt();
            }
        } catch (SQLException se) {
            se.printStackTrace();
        }

        jPanel2.removeAll();
        jPanel2.repaint();
        jPanel2.revalidate();

        jPanel2.add(HPMonthView);
        jPanel2.repaint();
        jPanel2.revalidate();
    }

    private void changeHPCalCalendar() {

        jPanel2.removeAll();
        jPanel2.repaint();
        jPanel2.revalidate();

        jPanel2.add(HPCalendar);
        jPanel2.repaint();
        jPanel2.revalidate();
    }

    private void backToDefault() {
        background0.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background1.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background2.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background3.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background4.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background5.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background6.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background13.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background14.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background15.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));
        background16.setIcon(new javax.swing.ImageIcon("src/uptodate/DefaultBackground.jpg"));

        placeholder.repaint();
        placeholder.revalidate();
    }

    private static Date defaultDate() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        return cal.getTime();
    }

    private String getReminderSetting() {
        int index = reminderSetting.getSelectedIndex();
        
        switch(index) {
            case 0:
                return "text";
            default:
                return "email";
        }
    }
    
    private Calendar getCalFromRemIndex (int reminder, Date date, String time) {
        Calendar c = Calendar.getInstance();
        c.setTime(date);
        Calendar t = Calendar.getInstance();
        try {
            t.setTime(format.parse(time));
        } catch (ParseException ex) {
            Logger.getLogger(MainJFrameNewest.class.getName()).log(Level.SEVERE, null, ex);
        }

        c.set(Calendar.HOUR_OF_DAY, t.get(Calendar.HOUR_OF_DAY));
        c.set(Calendar.MINUTE, t.get(Calendar.MINUTE));

        switch (reminder) {
            case 0:
                // at time of Event
                // do nothing 
                break;
            case 1:
                // 5 mins before
                c.add(Calendar.MINUTE, -5);
                break;
            case 2:
                // 15 mins before
                c.add(Calendar.MINUTE, -15);
                break;
            case 3:
                // 30 mins before
                c.add(Calendar.MINUTE, -30);
                break;
            case 4:
                // 1 hour before
                c.add(Calendar.HOUR, -1);
                break;
            case 5:
                // 1 day before
                c.add(Calendar.DATE, -1);
                break;
            case 6:
                // 1 week before
                c.add(Calendar.DATE, -7);
                break;
        }
        return c;
    }
    
    private void sendMessage()
    {
        Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
        String phoneNum = "";
        String ev = "";
        String startDate = "", endDate ="", location = "", description = "";
        String startTime = "", endTime = "";

        try
        {
         String sql = "Select pnum, EventName, StartDate, EndDate, Location, Description, StartTime, EndTime, "
                    + "ReminderDate "
                    + "FROM EVENT "
                    + "NATURAL JOIN \"USER\" "
                    + "NATURAL JOIN REMINDER "
                    + "WHERE USERNAME = ? AND REMINDERDATE = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, USERNAME);
            pstmt.setString(2, currentDay);
            //FOR TESTING, REPLACE currentDay WITH SOME ARBITRARY DAY ex. '2015-09-09'
            //(that or we add a row where day is the testing day)
            
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                phoneNum = rs.getString("pnum");
                ev = rs.getString("eventname");
                startDate = rs.getString("startDate");
                endDate = rs.getString("endDate");
                location = rs.getString("location");
                description = rs.getString("description");
                startTime = rs.getString("startTime");
                endTime = rs.getString("endTime");                
                String day = rs.getString("reminderdate");
                
                Message message;
                String msg = "Reminder Alert from upToDate! \n" + "You have an event coming up: " + ev + "\n Time: " + startDate + " @ " + startTime + " to " + endDate + " @ " + endTime + "\n Location: " + location + "\n Description: " + description;
                
                String check = "select has_sent from reminder where username = ? and reminderdate = ?";
                PreparedStatement checkPS = conn.prepareStatement(check);
                checkPS.setString(1, USERNAME);
                checkPS.setString(2, day);
                ResultSet rSet = checkPS.executeQuery();
                if(rSet.next())
                {
                    boolean c = rSet.getBoolean("has_sent");
                    //FOR TESTING, REPLACE currentDay WITH SOME ARBITRARY DAY ex. "2015-09-09"
                    //(that or we add a row where day is the testing day)
                    if(day.equals(currentDay) && c == false)
                    {
                        //creator method(to, from, message)
                        message = Message.creator(new PhoneNumber("+16266884692"),
                        new PhoneNumber("+16264276574"), msg).create();
                
                        String sent = "update reminder set has_sent = true where username = ? and reminderdate = ?";
                        PreparedStatement ps = conn.prepareStatement(sent);
                        ps.setString(1, USERNAME);
                        ps.setString(2, day);
                        ps.executeUpdate();
                    }
                }
            }
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    private void sendAlert() {
        
        String email = "";
        String startDate = "", endDate ="", location = "", description = "";
        String startTime = "", endTime = "";
        
        try {
            String sql = "Select Email, EventName, StartDate, EndDate, Location, Description, StartTime, EndTime, "
                    + "ReminderDate "
                    + "FROM EVENT "
                    + "NATURAL JOIN \"USER\" "
                    + "NATURAL JOIN REMINDER "
                    + "WHERE USERNAME = ? AND REMINDERDATE = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, USERNAME);
            pstmt.setString(2, currentDay);
            
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                email = rs.getString("email");
                startDate = rs.getString("startDate");
                endDate = rs.getString("endDate");
                location = rs.getString("location");
                description = rs.getString("description");
                startTime = rs.getString("startTime");
                endTime = rs.getString("endTime");
            }
            
            String subject = "Reminder Alert from upToDate!";
            String msg = "You have an event coming up: " + startDate + " @ " + startTime + " to " + endDate + " @ " + endTime + "Location: " + location + "Description: " + description;
            
            SendMail.send(email, subject, msg);
            
        } catch (SQLException se) {
            se.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Motif".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame5717.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame5717.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame5717.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame5717.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame5717().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AccountTab;
    private javax.swing.JPanel CreateAcct;
    private javax.swing.JScrollPane DayEventScrollPane2;
    private javax.swing.JScrollPane DayEventScrollPane3;
    private javax.swing.JMenu EControlTab;
    private javax.swing.JMenu EventTab;
    private javax.swing.JPanel HPCalendar;
    private javax.swing.JPanel HPDayView;
    private javax.swing.JPanel HPMonthView;
    private javax.swing.JPanel HPWeekView;
    private javax.swing.JMenu HelpTab;
    private javax.swing.JMenu HomeTab;
    private javax.swing.JPanel Homepage;
    private javax.swing.JButton JBCreateAccount;
    private javax.swing.JButton JBCreateAcct;
    private javax.swing.JButton JBGoBack;
    private javax.swing.JButton JBSignIn;
    private javax.swing.JButton JB_EditPassword;
    private javax.swing.JButton JDClose;
    private javax.swing.JDialog JDError;
    private javax.swing.JLabel JLAddress;
    private javax.swing.JLabel JLAlert;
    private javax.swing.JLabel JLError1;
    private javax.swing.JLabel JLFirstName;
    private javax.swing.JLabel JLLastName;
    private javax.swing.JLabel JLPassword;
    private javax.swing.JLabel JLPhoneNum;
    private javax.swing.JLabel JLType;
    private javax.swing.JLabel JLUsername;
    private javax.swing.JPasswordField JPWPass;
    private javax.swing.JTextField JTAddress;
    private javax.swing.JTextField JTFName;
    private javax.swing.JTextField JTLName;
    private javax.swing.JTextField JTPNum;
    private javax.swing.JTextField JTUsername;
    private javax.swing.JTextField JTUsername1;
    private javax.swing.JMenuItem Settings;
    private javax.swing.JMenu SettingsTab;
    private javax.swing.JMenu SignOutTab;
    private javax.swing.JButton backFromConfirm;
    private javax.swing.JButton backFromCreateEvnt;
    private javax.swing.JButton backFromCreateEvnt1;
    private javax.swing.JButton backFromDeleteEvnt;
    private javax.swing.JButton backFromDeleteEvnt1;
    private javax.swing.JButton backFromEditEvent;
    private javax.swing.JLabel background0;
    private javax.swing.JLabel background1;
    private javax.swing.JLabel background13;
    private javax.swing.JLabel background14;
    private javax.swing.JLabel background15;
    private javax.swing.JLabel background16;
    private javax.swing.JLabel background2;
    private javax.swing.JLabel background3;
    private javax.swing.JLabel background4;
    private javax.swing.JLabel background5;
    private javax.swing.JLabel background6;
    private javax.swing.JLabel cAcctAddress;
    private javax.swing.JLabel cAcctFName;
    private javax.swing.JLabel cAcctLName;
    private javax.swing.JLabel cAcctPNum;
    private javax.swing.JLabel cAcctPWord;
    private javax.swing.JLabel cAcctType;
    private javax.swing.JLabel cAcctUName;
    private javax.swing.JButton cEvnt;
    private javax.swing.JButton cEvntEmp;
    private javax.swing.JLabel cEvntTitle;
    private javax.swing.JLabel cEvntTitle1;
    private javax.swing.JLabel cRemTitle4;
    private javax.swing.JLabel cRemTitle5;
    private javax.swing.JButton cRemVal;
    private javax.swing.JButton cRemVal1;
    private javax.swing.ButtonGroup calCoverPageButtonGroup;
    private javax.swing.JRadioButton changeBlue;
    private javax.swing.JRadioButton changeCalendar;
    private javax.swing.JButton changeColor;
    private javax.swing.JRadioButton changeCurrentDay;
    private javax.swing.JRadioButton changeDay;
    private javax.swing.JRadioButton changeDefault;
    private javax.swing.JButton changeEndTime;
    private javax.swing.JRadioButton changeFirstAppt;
    private javax.swing.JRadioButton changeGreen;
    private javax.swing.JRadioButton changeMonth;
    private javax.swing.JButton changePassword;
    private javax.swing.JPanel changePasswordPanel;
    private javax.swing.JRadioButton changeRed;
    private javax.swing.JButton changeSettings;
    private javax.swing.JButton changeStartTime;
    private javax.swing.JRadioButton changeWeek;
    private javax.swing.JMenuItem createEvent;
    private javax.swing.JSpinner createEventEmpEndTime;
    private javax.swing.JSpinner createEventEmpStartTime;
    private javax.swing.JSpinner createEventEndTime;
    private javax.swing.JSpinner createEventStartTime;
    private javax.swing.JPanel createEvnt;
    private javax.swing.JPanel createEvntEmp;
    private javax.swing.JMenuItem createUserAcctEmp;
    private javax.swing.JPanel creatingAnAccount;
    private javax.swing.JPasswordField currentPassword;
    private javax.swing.JLabel dEventDescription;
    private javax.swing.JLabel dEventEDate;
    private javax.swing.JLabel dEventETime;
    private javax.swing.JLabel dEventInfo;
    private javax.swing.JComboBox<String> dEventList;
    private javax.swing.JLabel dEventLocation;
    private javax.swing.JLabel dEventName;
    private javax.swing.JLabel dEventSDate;
    private javax.swing.JLabel dEventSTime;
    private javax.swing.JLabel dEventTitle;
    private javax.swing.JButton dEvnt;
    private javax.swing.JLabel dash2;
    private javax.swing.JLabel dash3;
    private javax.swing.JLabel dateHomepage;
    private javax.swing.JButton dayEventChangeDate;
    private javax.swing.JLabel dayEventDate;
    private com.toedter.calendar.JDateChooser dayEventDateChooser;
    private javax.swing.JLabel dayEventDescription;
    private javax.swing.JLabel dayEventEndDate;
    private javax.swing.JLabel dayEventEndTime;
    private javax.swing.JList<String> dayEventList;
    private javax.swing.JLabel dayEventLocation;
    private javax.swing.JLabel dayEventName;
    private javax.swing.JLabel dayEventStartDate;
    private javax.swing.JLabel dayEventStartTime;
    private javax.swing.JButton dayViewCalendar;
    private javax.swing.ButtonGroup defaultColorButtonGroup;
    private javax.swing.JButton deleteChoice;
    private javax.swing.JMenuItem deleteEvent;
    private javax.swing.JPanel deleteEvnt;
    private javax.swing.JTextField descTF;
    private javax.swing.JTextField descTF1;
    private com.toedter.calendar.JDateChooser eDateChooser;
    private com.toedter.calendar.JDateChooser eDateChooser1;
    private javax.swing.JLabel eDesc;
    private javax.swing.JLabel eDesc1;
    private javax.swing.JLabel eEndDate;
    private javax.swing.JLabel eEndDate1;
    private javax.swing.JLabel eEndTime;
    private javax.swing.JLabel eEndTime1;
    private javax.swing.JLabel eError;
    private javax.swing.JLabel eError1;
    private javax.swing.JLabel eEventAtt;
    private javax.swing.JButton eEventChange1;
    private javax.swing.JButton eEventChange2;
    private javax.swing.JButton eEventChange3;
    private com.toedter.calendar.JDateChooser eEventDateChooser;
    private javax.swing.JLabel eEventDescription;
    private javax.swing.JLabel eEventEDate;
    private javax.swing.JLabel eEventETime;
    private javax.swing.JLabel eEventError;
    private javax.swing.JComboBox<String> eEventList;
    private javax.swing.JLabel eEventLocation;
    private javax.swing.JLabel eEventName;
    private javax.swing.JLabel eEventSDate;
    private javax.swing.JLabel eEventSTime;
    private javax.swing.JLabel eLocation;
    private javax.swing.JLabel eLocation1;
    private javax.swing.JLabel eStartDate;
    private javax.swing.JLabel eStartDate1;
    private javax.swing.JLabel eStartTime;
    private javax.swing.JLabel eStartTime1;
    private javax.swing.JLabel eTitle;
    private javax.swing.JLabel eTitle1;
    private javax.swing.JLabel eTitle2;
    private javax.swing.JLabel eTitle3;
    private javax.swing.JMenuItem editEvent;
    private javax.swing.JPanel editEvnt;
    private javax.swing.JLabel editEvntTitle;
    private javax.swing.JComboBox editProxCombo;
    private javax.swing.JButton evButton;
    private javax.swing.JLabel evNo;
    private javax.swing.JButton eventButton;
    private javax.swing.JComboBox eventOptions;
    private javax.swing.JButton eventWithReminder;
    private javax.swing.JButton eventWithReminder1;
    private javax.swing.JPanel events;
    private javax.swing.JLabel evtRemEmpError;
    private javax.swing.JLabel evtRemEmpError1;
    private javax.swing.JButton fullViewCalendar;
    private javax.swing.JMenuItem goHome;
    private javax.swing.JMenuItem goToHelp;
    private javax.swing.JPanel help;
    private javax.swing.ButtonGroup homeCalButtonGroup;
    private javax.swing.JTextField infoEventTF;
    private org.freixas.jcalendar.JCalendar jCalendarHomepage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPasswordField jPFPassword;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JLabel jlabelendtime;
    private javax.swing.JLabel jlabellocation;
    private javax.swing.JLabel jlabelstarttime;
    private javax.swing.JTextField locTF;
    private javax.swing.JTextField locTF1;
    private javax.swing.JButton monthEventChangeDate1;
    private javax.swing.JLabel monthEventDescription1;
    private javax.swing.JLabel monthEventEDate1;
    private javax.swing.JLabel monthEventEndDate1;
    private javax.swing.JLabel monthEventEndTime1;
    private javax.swing.JList<String> monthEventList1;
    private javax.swing.JLabel monthEventLocation1;
    private com.toedter.calendar.JMonthChooser monthEventMonthChooser1;
    private javax.swing.JLabel monthEventName1;
    private javax.swing.JLabel monthEventSDate1;
    private javax.swing.JScrollPane monthEventScrollPane1;
    private javax.swing.JLabel monthEventStartDate1;
    private javax.swing.JLabel monthEventStartTime1;
    private com.toedter.calendar.JYearChooser monthEventYearChooser1;
    private javax.swing.JButton monthViewCalendar;
    private javax.swing.JLabel newInfoEvent;
    private javax.swing.JPasswordField newPassword;
    private javax.swing.JPasswordField newRetypedPassword;
    private javax.swing.JPanel noAppt;
    private javax.swing.JLabel officeHourError;
    private javax.swing.JPanel openApp;
    private javax.swing.JPanel optionDelete;
    private javax.swing.JMenuItem pMenuCreateEvent;
    private javax.swing.JLabel passwordError;
    private javax.swing.JPanel placeholder;
    private javax.swing.JComboBox proxCombo;
    private javax.swing.JComboBox proxCombo1;
    private javax.swing.JLabel proximity;
    private javax.swing.JLabel proximity1;
    private javax.swing.JDialog reminderDialog;
    private javax.swing.JDialog reminderDialog1;
    private javax.swing.JPanel reminderOption;
    private javax.swing.JPanel reminderOption1;
    private javax.swing.JComboBox<String> reminderSetting;
    private javax.swing.JButton reminderSettingChange;
    private javax.swing.JLabel reminderTimeEdit;
    private javax.swing.JPanel reminders;
    private com.toedter.calendar.JDateChooser sDateChooser;
    private com.toedter.calendar.JDateChooser sDateChooser1;
    private javax.swing.JPanel settings;
    private javax.swing.JSpinner settingsEndTime;
    private javax.swing.JSpinner settingsStartTime;
    private javax.swing.JPanel signIn;
    private javax.swing.JMenuItem signOut;
    private javax.swing.JTextField titleTF;
    private javax.swing.JTextField titleTF1;
    private javax.swing.JComboBox type;
    private javax.swing.JScrollPane userTable;
    private javax.swing.JComboBox<String> userType;
    private javax.swing.JLabel usernameEvent;
    private javax.swing.JMenuItem viewAccount;
    private javax.swing.JPanel viewAcct;
    private javax.swing.JButton viewDayEventInfo1;
    private javax.swing.JButton viewMonthEventInfo1;
    private javax.swing.JTable viewUserTable;
    private javax.swing.JPanel viewUsers;
    private javax.swing.JMenuItem viewUsersItem;
    private javax.swing.JPopupMenu viewUsersPopupMenu;
    private javax.swing.JButton viewWeekEventInfo1;
    private javax.swing.JButton weekEventChangeDate1;
    private com.toedter.calendar.JDateChooser weekEventDateChooser1;
    private javax.swing.JLabel weekEventDescription1;
    private javax.swing.JLabel weekEventEDate1;
    private javax.swing.JLabel weekEventEndDate1;
    private javax.swing.JLabel weekEventEndTime1;
    private javax.swing.JList<String> weekEventList1;
    private javax.swing.JLabel weekEventLocation1;
    private javax.swing.JLabel weekEventName1;
    private javax.swing.JLabel weekEventSDate1;
    private javax.swing.JLabel weekEventStartDate1;
    private javax.swing.JLabel weekEventStartTime1;
    private javax.swing.JButton weekViewCalendar;
    private javax.swing.JPanel welcome;
    private javax.swing.JLabel welcomeHomepage;
    private javax.swing.JLabel welcomeHomepage1;
    // End of variables declaration//GEN-END:variables
}
